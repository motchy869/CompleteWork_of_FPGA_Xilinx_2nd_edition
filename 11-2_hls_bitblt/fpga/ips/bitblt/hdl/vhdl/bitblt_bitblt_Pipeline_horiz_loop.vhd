-- ==============================================================
-- Generated by Vitis HLS v2023.1.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bitblt_bitblt_Pipeline_horiz_loop is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_src_AWVALID : OUT STD_LOGIC;
    m_axi_src_AWREADY : IN STD_LOGIC;
    m_axi_src_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_src_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_src_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_src_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_src_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_src_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_src_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_src_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_src_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_src_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_src_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_src_WVALID : OUT STD_LOGIC;
    m_axi_src_WREADY : IN STD_LOGIC;
    m_axi_src_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_src_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_src_WLAST : OUT STD_LOGIC;
    m_axi_src_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_src_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_src_ARVALID : OUT STD_LOGIC;
    m_axi_src_ARREADY : IN STD_LOGIC;
    m_axi_src_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_src_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_src_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_src_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_src_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_src_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_src_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_src_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_src_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_src_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_src_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_src_RVALID : IN STD_LOGIC;
    m_axi_src_RREADY : OUT STD_LOGIC;
    m_axi_src_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_src_RLAST : IN STD_LOGIC;
    m_axi_src_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_src_RFIFONUM : IN STD_LOGIC_VECTOR (9 downto 0);
    m_axi_src_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_src_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_src_BVALID : IN STD_LOGIC;
    m_axi_src_BREADY : OUT STD_LOGIC;
    m_axi_src_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_src_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_src_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dst_AWVALID : OUT STD_LOGIC;
    m_axi_dst_AWREADY : IN STD_LOGIC;
    m_axi_dst_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_dst_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dst_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_dst_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_dst_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dst_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dst_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dst_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_dst_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dst_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dst_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dst_WVALID : OUT STD_LOGIC;
    m_axi_dst_WREADY : IN STD_LOGIC;
    m_axi_dst_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_dst_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dst_WLAST : OUT STD_LOGIC;
    m_axi_dst_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dst_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dst_ARVALID : OUT STD_LOGIC;
    m_axi_dst_ARREADY : IN STD_LOGIC;
    m_axi_dst_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_dst_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dst_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_dst_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_dst_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dst_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dst_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dst_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_dst_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dst_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dst_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dst_RVALID : IN STD_LOGIC;
    m_axi_dst_RREADY : OUT STD_LOGIC;
    m_axi_dst_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_dst_RLAST : IN STD_LOGIC;
    m_axi_dst_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dst_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_dst_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dst_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dst_BVALID : IN STD_LOGIC;
    m_axi_dst_BREADY : OUT STD_LOGIC;
    m_axi_dst_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dst_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dst_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    mul_ln22 : IN STD_LOGIC_VECTOR (21 downto 0);
    alpha_cast : IN STD_LOGIC_VECTOR (7 downto 0);
    zext_ln31_1 : IN STD_LOGIC_VECTOR (7 downto 0);
    dst_out : IN STD_LOGIC_VECTOR (63 downto 0);
    zext_ln31 : IN STD_LOGIC_VECTOR (10 downto 0);
    width : IN STD_LOGIC_VECTOR (10 downto 0);
    src_in : IN STD_LOGIC_VECTOR (63 downto 0);
    dst_in : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of bitblt_bitblt_Pipeline_horiz_loop is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv22_0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000000";
    constant ap_const_lv22_1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv35_20203 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000100000001000000011";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal or_ln30_reg_813 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln30_reg_813_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal icmp_ln30_reg_803 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_803_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal icmp_ln30_reg_803_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal icmp_ln30_reg_803_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state17_io : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal icmp_ln30_reg_803_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state18_io : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter21 : BOOLEAN;
    signal icmp_ln30_reg_803_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state23_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln30_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal dst_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal dst_blk_n_AW : STD_LOGIC;
    signal dst_blk_n_W : STD_LOGIC;
    signal dst_blk_n_B : STD_LOGIC;
    signal dst_blk_n_AR : STD_LOGIC;
    signal src_blk_n_R : STD_LOGIC;
    signal src_blk_n_AR : STD_LOGIC;
    signal first_iter_0_reg_230 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln31_cast_fu_242_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln31_cast_reg_777 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln31_1_cast_fu_246_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln31_1_cast_reg_783 : STD_LOGIC_VECTOR (15 downto 0);
    signal alpha_cast_cast_fu_250_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal alpha_cast_cast_reg_790 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_1_reg_797 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln30_reg_803_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_803_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_803_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_803_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_803_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_803_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_803_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_803_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_803_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_803_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_803_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_803_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_803_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_803_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_803_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_807 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln30_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln30_fu_300_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln30_reg_817 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln30_reg_817_pp0_iter2_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln30_reg_817_pp0_iter3_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln30_reg_817_pp0_iter4_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln30_reg_817_pp0_iter5_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln30_reg_817_pp0_iter6_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln30_reg_817_pp0_iter7_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln30_reg_817_pp0_iter8_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln30_reg_817_pp0_iter9_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln30_reg_817_pp0_iter10_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln30_reg_817_pp0_iter11_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln30_reg_817_pp0_iter12_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln30_reg_817_pp0_iter13_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln30_3_fu_308_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln30_3_reg_822 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln30_1_fu_314_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln30_1_reg_828 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln30_1_reg_828_pp0_iter2_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln30_1_reg_828_pp0_iter3_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln30_1_reg_828_pp0_iter4_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln30_1_reg_828_pp0_iter5_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln30_1_reg_828_pp0_iter6_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln30_1_reg_828_pp0_iter7_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln30_1_reg_828_pp0_iter8_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln30_1_reg_828_pp0_iter9_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln30_1_reg_828_pp0_iter10_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln30_1_reg_828_pp0_iter11_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln30_1_reg_828_pp0_iter12_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln30_1_reg_828_pp0_iter13_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln30_2_fu_378_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal select_ln30_2_reg_833 : STD_LOGIC_VECTOR (19 downto 0);
    signal select_ln30_2_reg_833_pp0_iter3_reg : STD_LOGIC_VECTOR (19 downto 0);
    signal select_ln30_2_reg_833_pp0_iter4_reg : STD_LOGIC_VECTOR (19 downto 0);
    signal select_ln30_2_reg_833_pp0_iter5_reg : STD_LOGIC_VECTOR (19 downto 0);
    signal select_ln30_2_reg_833_pp0_iter6_reg : STD_LOGIC_VECTOR (19 downto 0);
    signal select_ln30_2_reg_833_pp0_iter7_reg : STD_LOGIC_VECTOR (19 downto 0);
    signal select_ln30_2_reg_833_pp0_iter8_reg : STD_LOGIC_VECTOR (19 downto 0);
    signal select_ln30_2_reg_833_pp0_iter9_reg : STD_LOGIC_VECTOR (19 downto 0);
    signal select_ln30_2_reg_833_pp0_iter10_reg : STD_LOGIC_VECTOR (19 downto 0);
    signal select_ln30_2_reg_833_pp0_iter11_reg : STD_LOGIC_VECTOR (19 downto 0);
    signal select_ln30_2_reg_833_pp0_iter12_reg : STD_LOGIC_VECTOR (19 downto 0);
    signal select_ln30_2_reg_833_pp0_iter13_reg : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln31_mid2_v_reg_838 : STD_LOGIC_VECTOR (61 downto 0);
    signal sext_ln31_1_mid2_v_reg_843 : STD_LOGIC_VECTOR (61 downto 0);
    signal src_b_fu_479_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_b_reg_868 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_r_reg_873 : STD_LOGIC_VECTOR (7 downto 0);
    signal src_g_reg_878 : STD_LOGIC_VECTOR (7 downto 0);
    signal dst_b_fu_512_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal dst_b_reg_898 : STD_LOGIC_VECTOR (7 downto 0);
    signal dst_r_reg_903 : STD_LOGIC_VECTOR (7 downto 0);
    signal dst_g_reg_908 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln33_1_fu_599_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln33_1_reg_928 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_710_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln14_reg_933 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_717_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln15_reg_938 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_724_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln16_reg_943 : STD_LOGIC_VECTOR (16 downto 0);
    signal dst_addr_1_reg_948 : STD_LOGIC_VECTOR (63 downto 0);
    signal dst_r_1_reg_954 : STD_LOGIC_VECTOR (7 downto 0);
    signal dst_b_1_reg_959 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_reg_964 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_condition_exit_pp0_iter2_stage0 : STD_LOGIC;
    signal ap_phi_mux_first_iter_0_phi_fu_234_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal sext_ln30_fu_447_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln30_1_fu_450_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln33_fu_631_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal x_fu_132 : STD_LOGIC_VECTOR (10 downto 0);
    signal x_1_fu_322_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal y_fu_136 : STD_LOGIC_VECTOR (10 downto 0);
    signal indvar_flatten_fu_140 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln30_2_fu_280_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_shl_fu_350_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_fu_343_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_shl_cast_fu_357_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_shl1_cast_fu_361_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_mid_fu_371_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_shl_mid1_fu_385_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_shl_cast_mid1_fu_392_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_shl1_cast_mid1_fu_396_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_mid112_fu_400_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal empty_fu_365_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal select_ln30_3_fu_406_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal zext_ln30_2_fu_413_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln30_fu_417_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln30_1_fu_432_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_mid2_v_fu_536_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln14_1_fu_556_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln14_1_fu_556_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln14_1_fu_556_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln15_1_fu_568_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln15_1_fu_568_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln15_1_fu_568_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln16_1_fu_580_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln16_1_fu_580_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln16_1_fu_580_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln30_fu_543_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln33_fu_550_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln33_2_fu_589_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln33_2_fu_595_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal zext_ln30_1_fu_547_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln_fu_605_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal zext_ln33_3_fu_612_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln33_fu_616_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_fu_621_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal mul_ln14_2_fu_644_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln14_2_fu_644_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln14_2_fu_644_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal mul_ln15_2_fu_663_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln15_2_fu_663_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln16_2_fu_672_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln16_2_fu_672_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln16_2_fu_672_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal mul_ln15_2_fu_663_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal or_ln18_1_fu_698_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_710_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_710_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_710_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_717_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_717_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_717_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_724_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_724_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_724_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_710_ce : STD_LOGIC;
    signal grp_fu_717_ce : STD_LOGIC;
    signal grp_fu_724_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter21_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_710_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_710_p20 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_717_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_717_p20 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_724_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_724_p20 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln14_1_fu_556_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln14_2_fu_644_p00 : STD_LOGIC_VECTOR (34 downto 0);
    signal mul_ln15_1_fu_568_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln15_2_fu_663_p00 : STD_LOGIC_VECTOR (34 downto 0);
    signal mul_ln16_1_fu_580_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln16_2_fu_672_p00 : STD_LOGIC_VECTOR (34 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component bitblt_mul_8ns_8ns_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component bitblt_mul_17ns_19ns_35_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (18 downto 0);
        dout : OUT STD_LOGIC_VECTOR (34 downto 0) );
    end component;


    component bitblt_mac_muladd_8ns_8ns_16ns_17_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component bitblt_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_8ns_8ns_16_1_1_U1 : component bitblt_mul_8ns_8ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln14_1_fu_556_p0,
        din1 => mul_ln14_1_fu_556_p1,
        dout => mul_ln14_1_fu_556_p2);

    mul_8ns_8ns_16_1_1_U2 : component bitblt_mul_8ns_8ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln15_1_fu_568_p0,
        din1 => mul_ln15_1_fu_568_p1,
        dout => mul_ln15_1_fu_568_p2);

    mul_8ns_8ns_16_1_1_U3 : component bitblt_mul_8ns_8ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln16_1_fu_580_p0,
        din1 => mul_ln16_1_fu_580_p1,
        dout => mul_ln16_1_fu_580_p2);

    mul_17ns_19ns_35_1_1_U4 : component bitblt_mul_17ns_19ns_35_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 19,
        dout_WIDTH => 35)
    port map (
        din0 => mul_ln14_2_fu_644_p0,
        din1 => mul_ln14_2_fu_644_p1,
        dout => mul_ln14_2_fu_644_p2);

    mul_17ns_19ns_35_1_1_U5 : component bitblt_mul_17ns_19ns_35_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 19,
        dout_WIDTH => 35)
    port map (
        din0 => mul_ln15_2_fu_663_p0,
        din1 => mul_ln15_2_fu_663_p1,
        dout => mul_ln15_2_fu_663_p2);

    mul_17ns_19ns_35_1_1_U6 : component bitblt_mul_17ns_19ns_35_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 19,
        dout_WIDTH => 35)
    port map (
        din0 => mul_ln16_2_fu_672_p0,
        din1 => mul_ln16_2_fu_672_p1,
        dout => mul_ln16_2_fu_672_p2);

    mac_muladd_8ns_8ns_16ns_17_4_1_U7 : component bitblt_mac_muladd_8ns_8ns_16ns_17_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_710_p0,
        din1 => grp_fu_710_p1,
        din2 => grp_fu_710_p2,
        ce => grp_fu_710_ce,
        dout => grp_fu_710_p3);

    mac_muladd_8ns_8ns_16ns_17_4_1_U8 : component bitblt_mac_muladd_8ns_8ns_16ns_17_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_717_p0,
        din1 => grp_fu_717_p1,
        din2 => grp_fu_717_p2,
        ce => grp_fu_717_ce,
        dout => grp_fu_717_p3);

    mac_muladd_8ns_8ns_16ns_17_4_1_U9 : component bitblt_mac_muladd_8ns_8ns_16ns_17_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_724_p0,
        din1 => grp_fu_724_p1,
        din2 => grp_fu_724_p2,
        ce => grp_fu_724_ce,
        dout => grp_fu_724_p3);

    flow_control_loop_pipe_sequential_init_U : component bitblt_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter21_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage0)) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    first_iter_0_reg_230_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln30_reg_803 = ap_const_lv1_0))) then 
                first_iter_0_reg_230 <= ap_const_lv1_0;
            elsif (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                first_iter_0_reg_230 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_140 <= ap_const_lv22_0;
                elsif (((icmp_ln30_fu_275_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten_fu_140 <= add_ln30_2_fu_280_p2;
                end if;
            end if; 
        end if;
    end process;

    x_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    x_fu_132 <= ap_const_lv11_0;
                elsif (((icmp_ln30_fu_275_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    x_fu_132 <= x_1_fu_322_p2;
                end if;
            end if; 
        end if;
    end process;

    y_fu_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    y_fu_136 <= ap_const_lv11_0;
                elsif (((icmp_ln30_fu_275_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    y_fu_136 <= select_ln30_1_fu_314_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (icmp_ln30_reg_803_pp0_iter14_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln14_reg_933 <= grp_fu_710_p3;
                add_ln15_reg_938 <= grp_fu_717_p3;
                add_ln16_reg_943 <= grp_fu_724_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln30_fu_275_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln30_3_reg_822 <= add_ln30_3_fu_308_p2;
                icmp_ln31_reg_807 <= icmp_ln31_fu_289_p2;
                or_ln30_reg_813 <= or_ln30_fu_294_p2;
                select_ln30_1_reg_828 <= select_ln30_1_fu_314_p3;
                select_ln30_reg_817 <= select_ln30_fu_300_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln30_reg_803_pp0_iter13_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln33_1_reg_928 <= add_ln33_1_fu_599_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    alpha_cast_cast_reg_790(7 downto 0) <= alpha_cast_cast_fu_250_p1(7 downto 0);
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                icmp_ln30_reg_803 <= icmp_ln30_fu_275_p2;
                y_1_reg_797 <= y_fu_136;
                    zext_ln31_1_cast_reg_783(7 downto 0) <= zext_ln31_1_cast_fu_246_p1(7 downto 0);
                    zext_ln31_cast_reg_777(10 downto 0) <= zext_ln31_cast_fu_242_p1(10 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                icmp_ln30_reg_803_pp0_iter10_reg <= icmp_ln30_reg_803_pp0_iter9_reg;
                icmp_ln30_reg_803_pp0_iter11_reg <= icmp_ln30_reg_803_pp0_iter10_reg;
                icmp_ln30_reg_803_pp0_iter12_reg <= icmp_ln30_reg_803_pp0_iter11_reg;
                icmp_ln30_reg_803_pp0_iter13_reg <= icmp_ln30_reg_803_pp0_iter12_reg;
                icmp_ln30_reg_803_pp0_iter14_reg <= icmp_ln30_reg_803_pp0_iter13_reg;
                icmp_ln30_reg_803_pp0_iter15_reg <= icmp_ln30_reg_803_pp0_iter14_reg;
                icmp_ln30_reg_803_pp0_iter16_reg <= icmp_ln30_reg_803_pp0_iter15_reg;
                icmp_ln30_reg_803_pp0_iter17_reg <= icmp_ln30_reg_803_pp0_iter16_reg;
                icmp_ln30_reg_803_pp0_iter18_reg <= icmp_ln30_reg_803_pp0_iter17_reg;
                icmp_ln30_reg_803_pp0_iter19_reg <= icmp_ln30_reg_803_pp0_iter18_reg;
                icmp_ln30_reg_803_pp0_iter20_reg <= icmp_ln30_reg_803_pp0_iter19_reg;
                icmp_ln30_reg_803_pp0_iter21_reg <= icmp_ln30_reg_803_pp0_iter20_reg;
                icmp_ln30_reg_803_pp0_iter2_reg <= icmp_ln30_reg_803;
                icmp_ln30_reg_803_pp0_iter3_reg <= icmp_ln30_reg_803_pp0_iter2_reg;
                icmp_ln30_reg_803_pp0_iter4_reg <= icmp_ln30_reg_803_pp0_iter3_reg;
                icmp_ln30_reg_803_pp0_iter5_reg <= icmp_ln30_reg_803_pp0_iter4_reg;
                icmp_ln30_reg_803_pp0_iter6_reg <= icmp_ln30_reg_803_pp0_iter5_reg;
                icmp_ln30_reg_803_pp0_iter7_reg <= icmp_ln30_reg_803_pp0_iter6_reg;
                icmp_ln30_reg_803_pp0_iter8_reg <= icmp_ln30_reg_803_pp0_iter7_reg;
                icmp_ln30_reg_803_pp0_iter9_reg <= icmp_ln30_reg_803_pp0_iter8_reg;
                or_ln30_reg_813_pp0_iter2_reg <= or_ln30_reg_813;
                select_ln30_1_reg_828_pp0_iter10_reg <= select_ln30_1_reg_828_pp0_iter9_reg;
                select_ln30_1_reg_828_pp0_iter11_reg <= select_ln30_1_reg_828_pp0_iter10_reg;
                select_ln30_1_reg_828_pp0_iter12_reg <= select_ln30_1_reg_828_pp0_iter11_reg;
                select_ln30_1_reg_828_pp0_iter13_reg <= select_ln30_1_reg_828_pp0_iter12_reg;
                select_ln30_1_reg_828_pp0_iter2_reg <= select_ln30_1_reg_828;
                select_ln30_1_reg_828_pp0_iter3_reg <= select_ln30_1_reg_828_pp0_iter2_reg;
                select_ln30_1_reg_828_pp0_iter4_reg <= select_ln30_1_reg_828_pp0_iter3_reg;
                select_ln30_1_reg_828_pp0_iter5_reg <= select_ln30_1_reg_828_pp0_iter4_reg;
                select_ln30_1_reg_828_pp0_iter6_reg <= select_ln30_1_reg_828_pp0_iter5_reg;
                select_ln30_1_reg_828_pp0_iter7_reg <= select_ln30_1_reg_828_pp0_iter6_reg;
                select_ln30_1_reg_828_pp0_iter8_reg <= select_ln30_1_reg_828_pp0_iter7_reg;
                select_ln30_1_reg_828_pp0_iter9_reg <= select_ln30_1_reg_828_pp0_iter8_reg;
                    select_ln30_2_reg_833_pp0_iter10_reg(19 downto 9) <= select_ln30_2_reg_833_pp0_iter9_reg(19 downto 9);
                    select_ln30_2_reg_833_pp0_iter11_reg(19 downto 9) <= select_ln30_2_reg_833_pp0_iter10_reg(19 downto 9);
                    select_ln30_2_reg_833_pp0_iter12_reg(19 downto 9) <= select_ln30_2_reg_833_pp0_iter11_reg(19 downto 9);
                    select_ln30_2_reg_833_pp0_iter13_reg(19 downto 9) <= select_ln30_2_reg_833_pp0_iter12_reg(19 downto 9);
                    select_ln30_2_reg_833_pp0_iter3_reg(19 downto 9) <= select_ln30_2_reg_833(19 downto 9);
                    select_ln30_2_reg_833_pp0_iter4_reg(19 downto 9) <= select_ln30_2_reg_833_pp0_iter3_reg(19 downto 9);
                    select_ln30_2_reg_833_pp0_iter5_reg(19 downto 9) <= select_ln30_2_reg_833_pp0_iter4_reg(19 downto 9);
                    select_ln30_2_reg_833_pp0_iter6_reg(19 downto 9) <= select_ln30_2_reg_833_pp0_iter5_reg(19 downto 9);
                    select_ln30_2_reg_833_pp0_iter7_reg(19 downto 9) <= select_ln30_2_reg_833_pp0_iter6_reg(19 downto 9);
                    select_ln30_2_reg_833_pp0_iter8_reg(19 downto 9) <= select_ln30_2_reg_833_pp0_iter7_reg(19 downto 9);
                    select_ln30_2_reg_833_pp0_iter9_reg(19 downto 9) <= select_ln30_2_reg_833_pp0_iter8_reg(19 downto 9);
                select_ln30_reg_817_pp0_iter10_reg <= select_ln30_reg_817_pp0_iter9_reg;
                select_ln30_reg_817_pp0_iter11_reg <= select_ln30_reg_817_pp0_iter10_reg;
                select_ln30_reg_817_pp0_iter12_reg <= select_ln30_reg_817_pp0_iter11_reg;
                select_ln30_reg_817_pp0_iter13_reg <= select_ln30_reg_817_pp0_iter12_reg;
                select_ln30_reg_817_pp0_iter2_reg <= select_ln30_reg_817;
                select_ln30_reg_817_pp0_iter3_reg <= select_ln30_reg_817_pp0_iter2_reg;
                select_ln30_reg_817_pp0_iter4_reg <= select_ln30_reg_817_pp0_iter3_reg;
                select_ln30_reg_817_pp0_iter5_reg <= select_ln30_reg_817_pp0_iter4_reg;
                select_ln30_reg_817_pp0_iter6_reg <= select_ln30_reg_817_pp0_iter5_reg;
                select_ln30_reg_817_pp0_iter7_reg <= select_ln30_reg_817_pp0_iter6_reg;
                select_ln30_reg_817_pp0_iter8_reg <= select_ln30_reg_817_pp0_iter7_reg;
                select_ln30_reg_817_pp0_iter9_reg <= select_ln30_reg_817_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln30_reg_803_pp0_iter14_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                dst_addr_1_reg_948 <= sext_ln33_fu_631_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln30_reg_803_pp0_iter15_reg = ap_const_lv1_0))) then
                dst_b_1_reg_959 <= mul_ln16_2_fu_672_p2(32 downto 25);
                dst_r_1_reg_954 <= mul_ln14_2_fu_644_p2(32 downto 25);
                tmp_1_reg_964 <= mul_ln15_2_fu_663_p2(32 downto 25);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln30_reg_803_pp0_iter12_reg = ap_const_lv1_0))) then
                dst_b_reg_898 <= dst_b_fu_512_p1;
                dst_g_reg_908 <= m_axi_dst_RDATA(15 downto 8);
                dst_r_reg_903 <= m_axi_dst_RDATA(23 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln30_reg_803 = ap_const_lv1_0))) then
                    select_ln30_2_reg_833(19 downto 9) <= select_ln30_2_fu_378_p3(19 downto 9);
                sext_ln31_1_mid2_v_reg_843 <= add_ln30_1_fu_432_p2(63 downto 2);
                sext_ln31_mid2_v_reg_838 <= add_ln30_fu_417_p2(63 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln30_reg_803_pp0_iter10_reg = ap_const_lv1_0))) then
                src_b_reg_868 <= src_b_fu_479_p1;
                src_g_reg_878 <= m_axi_src_RDATA(15 downto 8);
                src_r_reg_873 <= m_axi_src_RDATA(23 downto 16);
            end if;
        end if;
    end process;
    zext_ln31_cast_reg_777(31 downto 11) <= "000000000000000000000";
    zext_ln31_1_cast_reg_783(15 downto 8) <= "00000000";
    alpha_cast_cast_reg_790(15 downto 8) <= "00000000";
    select_ln30_2_reg_833(8 downto 0) <= "000000000";
    select_ln30_2_reg_833_pp0_iter3_reg(8 downto 0) <= "000000000";
    select_ln30_2_reg_833_pp0_iter4_reg(8 downto 0) <= "000000000";
    select_ln30_2_reg_833_pp0_iter5_reg(8 downto 0) <= "000000000";
    select_ln30_2_reg_833_pp0_iter6_reg(8 downto 0) <= "000000000";
    select_ln30_2_reg_833_pp0_iter7_reg(8 downto 0) <= "000000000";
    select_ln30_2_reg_833_pp0_iter8_reg(8 downto 0) <= "000000000";
    select_ln30_2_reg_833_pp0_iter9_reg(8 downto 0) <= "000000000";
    select_ln30_2_reg_833_pp0_iter10_reg(8 downto 0) <= "000000000";
    select_ln30_2_reg_833_pp0_iter11_reg(8 downto 0) <= "000000000";
    select_ln30_2_reg_833_pp0_iter12_reg(8 downto 0) <= "000000000";
    select_ln30_2_reg_833_pp0_iter13_reg(8 downto 0) <= "000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln30_1_fu_432_p2 <= std_logic_vector(unsigned(zext_ln30_2_fu_413_p1) + unsigned(dst_in));
    add_ln30_2_fu_280_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_140) + unsigned(ap_const_lv22_1));
    add_ln30_3_fu_308_p2 <= std_logic_vector(unsigned(y_fu_136) + unsigned(ap_const_lv11_1));
    add_ln30_fu_417_p2 <= std_logic_vector(unsigned(zext_ln30_2_fu_413_p1) + unsigned(src_in));
    add_ln33_1_fu_599_p2 <= std_logic_vector(unsigned(zext_ln33_2_fu_595_p1) + unsigned(zext_ln30_1_fu_547_p1));
    add_ln33_2_fu_589_p2 <= std_logic_vector(unsigned(zext_ln30_fu_543_p1) + unsigned(zext_ln33_fu_550_p1));
    add_ln33_fu_616_p2 <= std_logic_vector(unsigned(zext_ln33_3_fu_612_p1) + unsigned(dst_out));
    alpha_cast_cast_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(alpha_cast),16));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter22, m_axi_src_RVALID, m_axi_dst_RVALID, m_axi_dst_BVALID, icmp_ln30_reg_803_pp0_iter10_reg, icmp_ln30_reg_803_pp0_iter12_reg, icmp_ln30_reg_803_pp0_iter21_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (icmp_ln30_reg_803_pp0_iter21_reg = ap_const_lv1_0) and (m_axi_dst_BVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (icmp_ln30_reg_803_pp0_iter12_reg = ap_const_lv1_0) and (m_axi_dst_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (icmp_ln30_reg_803_pp0_iter10_reg = ap_const_lv1_0) and (m_axi_src_RVALID = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter22, m_axi_src_RVALID, m_axi_dst_RVALID, m_axi_dst_BVALID, ap_block_state4_io, icmp_ln30_reg_803_pp0_iter10_reg, icmp_ln30_reg_803_pp0_iter12_reg, ap_block_state17_io, ap_block_state18_io, icmp_ln30_reg_803_pp0_iter21_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (icmp_ln30_reg_803_pp0_iter21_reg = ap_const_lv1_0) and (m_axi_dst_BVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state18_io)) or ((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state17_io)) or ((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (icmp_ln30_reg_803_pp0_iter12_reg = ap_const_lv1_0) and (m_axi_dst_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (icmp_ln30_reg_803_pp0_iter10_reg = ap_const_lv1_0) and (m_axi_src_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter22, m_axi_src_RVALID, m_axi_dst_RVALID, m_axi_dst_BVALID, ap_block_state4_io, icmp_ln30_reg_803_pp0_iter10_reg, icmp_ln30_reg_803_pp0_iter12_reg, ap_block_state17_io, ap_block_state18_io, icmp_ln30_reg_803_pp0_iter21_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (icmp_ln30_reg_803_pp0_iter21_reg = ap_const_lv1_0) and (m_axi_dst_BVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state18_io)) or ((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state17_io)) or ((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (icmp_ln30_reg_803_pp0_iter12_reg = ap_const_lv1_0) and (m_axi_dst_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (icmp_ln30_reg_803_pp0_iter10_reg = ap_const_lv1_0) and (m_axi_src_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_io)));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state12_pp0_stage0_iter11_assign_proc : process(m_axi_src_RVALID, icmp_ln30_reg_803_pp0_iter10_reg)
    begin
                ap_block_state12_pp0_stage0_iter11 <= ((icmp_ln30_reg_803_pp0_iter10_reg = ap_const_lv1_0) and (m_axi_src_RVALID = ap_const_logic_0));
    end process;

        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state14_pp0_stage0_iter13_assign_proc : process(m_axi_dst_RVALID, icmp_ln30_reg_803_pp0_iter12_reg)
    begin
                ap_block_state14_pp0_stage0_iter13 <= ((icmp_ln30_reg_803_pp0_iter12_reg = ap_const_lv1_0) and (m_axi_dst_RVALID = ap_const_logic_0));
    end process;

        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state17_io_assign_proc : process(m_axi_dst_AWREADY, icmp_ln30_reg_803_pp0_iter15_reg)
    begin
                ap_block_state17_io <= ((icmp_ln30_reg_803_pp0_iter15_reg = ap_const_lv1_0) and (m_axi_dst_AWREADY = ap_const_logic_0));
    end process;

        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state18_io_assign_proc : process(m_axi_dst_WREADY, icmp_ln30_reg_803_pp0_iter16_reg)
    begin
                ap_block_state18_io <= ((icmp_ln30_reg_803_pp0_iter16_reg = ap_const_lv1_0) and (m_axi_dst_WREADY = ap_const_logic_0));
    end process;

        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state23_pp0_stage0_iter22_assign_proc : process(m_axi_dst_BVALID, icmp_ln30_reg_803_pp0_iter21_reg)
    begin
                ap_block_state23_pp0_stage0_iter22 <= ((icmp_ln30_reg_803_pp0_iter21_reg = ap_const_lv1_0) and (m_axi_dst_BVALID = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_assign_proc : process(m_axi_src_ARREADY, m_axi_dst_ARREADY, or_ln30_reg_813_pp0_iter2_reg)
    begin
                ap_block_state4_io <= (((or_ln30_reg_813_pp0_iter2_reg = ap_const_lv1_1) and (m_axi_dst_ARREADY = ap_const_logic_0)) or ((or_ln30_reg_813_pp0_iter2_reg = ap_const_lv1_1) and (m_axi_src_ARREADY = ap_const_logic_0)));
    end process;

        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln30_fu_275_p2)
    begin
        if (((icmp_ln30_fu_275_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter2_stage0_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln30_reg_803, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln30_reg_803 = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter21_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter21_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22)
    begin
        if (((ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) 
    and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_phi_mux_first_iter_0_phi_fu_234_p4_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln30_reg_803, ap_block_pp0_stage0, first_iter_0_reg_230)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln30_reg_803 = ap_const_lv1_0))) then 
            ap_phi_mux_first_iter_0_phi_fu_234_p4 <= ap_const_lv1_0;
        else 
            ap_phi_mux_first_iter_0_phi_fu_234_p4 <= first_iter_0_reg_230;
        end if; 
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    dst_b_fu_512_p1 <= m_axi_dst_RDATA(8 - 1 downto 0);

    dst_blk_n_AR_assign_proc : process(ap_enable_reg_pp0_iter3, m_axi_dst_ARREADY, or_ln30_reg_813_pp0_iter2_reg, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (or_ln30_reg_813_pp0_iter2_reg = ap_const_lv1_1))) then 
            dst_blk_n_AR <= m_axi_dst_ARREADY;
        else 
            dst_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    dst_blk_n_AW_assign_proc : process(ap_enable_reg_pp0_iter16, m_axi_dst_AWREADY, icmp_ln30_reg_803_pp0_iter15_reg, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln30_reg_803_pp0_iter15_reg = ap_const_lv1_0))) then 
            dst_blk_n_AW <= m_axi_dst_AWREADY;
        else 
            dst_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    dst_blk_n_B_assign_proc : process(ap_enable_reg_pp0_iter22, m_axi_dst_BVALID, icmp_ln30_reg_803_pp0_iter21_reg, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln30_reg_803_pp0_iter21_reg = ap_const_lv1_0))) then 
            dst_blk_n_B <= m_axi_dst_BVALID;
        else 
            dst_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    dst_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter13, m_axi_dst_RVALID, icmp_ln30_reg_803_pp0_iter12_reg, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln30_reg_803_pp0_iter12_reg = ap_const_lv1_0))) then 
            dst_blk_n_R <= m_axi_dst_RVALID;
        else 
            dst_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    dst_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter17, m_axi_dst_WREADY, icmp_ln30_reg_803_pp0_iter16_reg, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln30_reg_803_pp0_iter16_reg = ap_const_lv1_0))) then 
            dst_blk_n_W <= m_axi_dst_WREADY;
        else 
            dst_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    empty_fu_365_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_357_p1) + unsigned(p_shl1_cast_fu_361_p1));

    grp_fu_710_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_710_ce <= ap_const_logic_1;
        else 
            grp_fu_710_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_710_p0 <= grp_fu_710_p00(8 - 1 downto 0);
    grp_fu_710_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_r_reg_873),16));
    grp_fu_710_p1 <= alpha_cast_cast_reg_790(8 - 1 downto 0);
    grp_fu_710_p2 <= grp_fu_710_p20(16 - 1 downto 0);
    grp_fu_710_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln14_1_fu_556_p2),17));

    grp_fu_717_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_717_ce <= ap_const_logic_1;
        else 
            grp_fu_717_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_717_p0 <= grp_fu_717_p00(8 - 1 downto 0);
    grp_fu_717_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_g_reg_878),16));
    grp_fu_717_p1 <= alpha_cast_cast_reg_790(8 - 1 downto 0);
    grp_fu_717_p2 <= grp_fu_717_p20(16 - 1 downto 0);
    grp_fu_717_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln15_1_fu_568_p2),17));

    grp_fu_724_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_724_ce <= ap_const_logic_1;
        else 
            grp_fu_724_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_724_p0 <= grp_fu_724_p00(8 - 1 downto 0);
    grp_fu_724_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_b_reg_868),16));
    grp_fu_724_p1 <= alpha_cast_cast_reg_790(8 - 1 downto 0);
    grp_fu_724_p2 <= grp_fu_724_p20(16 - 1 downto 0);
    grp_fu_724_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln16_1_fu_580_p2),17));
    icmp_ln30_fu_275_p2 <= "1" when (indvar_flatten_fu_140 = mul_ln22) else "0";
    icmp_ln31_fu_289_p2 <= "1" when (x_fu_132 = width) else "0";
    m_axi_dst_ARADDR <= sext_ln30_1_fu_450_p1;
    m_axi_dst_ARBURST <= ap_const_lv2_0;
    m_axi_dst_ARCACHE <= ap_const_lv4_0;
    m_axi_dst_ARID <= ap_const_lv1_0;
    m_axi_dst_ARLEN <= zext_ln31_cast_reg_777;
    m_axi_dst_ARLOCK <= ap_const_lv2_0;
    m_axi_dst_ARPROT <= ap_const_lv3_0;
    m_axi_dst_ARQOS <= ap_const_lv4_0;
    m_axi_dst_ARREGION <= ap_const_lv4_0;
    m_axi_dst_ARSIZE <= ap_const_lv3_0;
    m_axi_dst_ARUSER <= ap_const_lv1_0;

    m_axi_dst_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter3, or_ln30_reg_813_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln30_reg_813_pp0_iter2_reg = ap_const_lv1_1))) then 
            m_axi_dst_ARVALID <= ap_const_logic_1;
        else 
            m_axi_dst_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_dst_AWADDR <= dst_addr_1_reg_948;
    m_axi_dst_AWBURST <= ap_const_lv2_0;
    m_axi_dst_AWCACHE <= ap_const_lv4_0;
    m_axi_dst_AWID <= ap_const_lv1_0;
    m_axi_dst_AWLEN <= ap_const_lv32_1;
    m_axi_dst_AWLOCK <= ap_const_lv2_0;
    m_axi_dst_AWPROT <= ap_const_lv3_0;
    m_axi_dst_AWQOS <= ap_const_lv4_0;
    m_axi_dst_AWREGION <= ap_const_lv4_0;
    m_axi_dst_AWSIZE <= ap_const_lv3_0;
    m_axi_dst_AWUSER <= ap_const_lv1_0;

    m_axi_dst_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter16, icmp_ln30_reg_803_pp0_iter15_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln30_reg_803_pp0_iter15_reg = ap_const_lv1_0))) then 
            m_axi_dst_AWVALID <= ap_const_logic_1;
        else 
            m_axi_dst_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_dst_BREADY_assign_proc : process(ap_enable_reg_pp0_iter22, icmp_ln30_reg_803_pp0_iter21_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln30_reg_803_pp0_iter21_reg = ap_const_lv1_0))) then 
            m_axi_dst_BREADY <= ap_const_logic_1;
        else 
            m_axi_dst_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_dst_RREADY_assign_proc : process(ap_enable_reg_pp0_iter13, icmp_ln30_reg_803_pp0_iter12_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln30_reg_803_pp0_iter12_reg = ap_const_lv1_0))) then 
            m_axi_dst_RREADY <= ap_const_logic_1;
        else 
            m_axi_dst_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_dst_WDATA <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln18_1_fu_698_p4),32));
    m_axi_dst_WID <= ap_const_lv1_0;
    m_axi_dst_WLAST <= ap_const_logic_0;
    m_axi_dst_WSTRB <= ap_const_lv4_F;
    m_axi_dst_WUSER <= ap_const_lv1_0;

    m_axi_dst_WVALID_assign_proc : process(ap_enable_reg_pp0_iter17, icmp_ln30_reg_803_pp0_iter16_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln30_reg_803_pp0_iter16_reg = ap_const_lv1_0))) then 
            m_axi_dst_WVALID <= ap_const_logic_1;
        else 
            m_axi_dst_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_src_ARADDR <= sext_ln30_fu_447_p1;
    m_axi_src_ARBURST <= ap_const_lv2_0;
    m_axi_src_ARCACHE <= ap_const_lv4_0;
    m_axi_src_ARID <= ap_const_lv1_0;
    m_axi_src_ARLEN <= zext_ln31_cast_reg_777;
    m_axi_src_ARLOCK <= ap_const_lv2_0;
    m_axi_src_ARPROT <= ap_const_lv3_0;
    m_axi_src_ARQOS <= ap_const_lv4_0;
    m_axi_src_ARREGION <= ap_const_lv4_0;
    m_axi_src_ARSIZE <= ap_const_lv3_0;
    m_axi_src_ARUSER <= ap_const_lv1_0;

    m_axi_src_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter3, or_ln30_reg_813_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln30_reg_813_pp0_iter2_reg = ap_const_lv1_1))) then 
            m_axi_src_ARVALID <= ap_const_logic_1;
        else 
            m_axi_src_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_src_AWADDR <= ap_const_lv64_0;
    m_axi_src_AWBURST <= ap_const_lv2_0;
    m_axi_src_AWCACHE <= ap_const_lv4_0;
    m_axi_src_AWID <= ap_const_lv1_0;
    m_axi_src_AWLEN <= ap_const_lv32_0;
    m_axi_src_AWLOCK <= ap_const_lv2_0;
    m_axi_src_AWPROT <= ap_const_lv3_0;
    m_axi_src_AWQOS <= ap_const_lv4_0;
    m_axi_src_AWREGION <= ap_const_lv4_0;
    m_axi_src_AWSIZE <= ap_const_lv3_0;
    m_axi_src_AWUSER <= ap_const_lv1_0;
    m_axi_src_AWVALID <= ap_const_logic_0;
    m_axi_src_BREADY <= ap_const_logic_0;

    m_axi_src_RREADY_assign_proc : process(ap_enable_reg_pp0_iter11, icmp_ln30_reg_803_pp0_iter10_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln30_reg_803_pp0_iter10_reg = ap_const_lv1_0))) then 
            m_axi_src_RREADY <= ap_const_logic_1;
        else 
            m_axi_src_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_src_WDATA <= ap_const_lv32_0;
    m_axi_src_WID <= ap_const_lv1_0;
    m_axi_src_WLAST <= ap_const_logic_0;
    m_axi_src_WSTRB <= ap_const_lv4_0;
    m_axi_src_WUSER <= ap_const_lv1_0;
    m_axi_src_WVALID <= ap_const_logic_0;
    mul_ln14_1_fu_556_p0 <= mul_ln14_1_fu_556_p00(8 - 1 downto 0);
    mul_ln14_1_fu_556_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dst_r_reg_903),16));
    mul_ln14_1_fu_556_p1 <= zext_ln31_1_cast_reg_783(8 - 1 downto 0);
    mul_ln14_2_fu_644_p0 <= mul_ln14_2_fu_644_p00(17 - 1 downto 0);
    mul_ln14_2_fu_644_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln14_reg_933),35));
    mul_ln14_2_fu_644_p1 <= ap_const_lv35_20203(19 - 1 downto 0);
    mul_ln15_1_fu_568_p0 <= mul_ln15_1_fu_568_p00(8 - 1 downto 0);
    mul_ln15_1_fu_568_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dst_g_reg_908),16));
    mul_ln15_1_fu_568_p1 <= zext_ln31_1_cast_reg_783(8 - 1 downto 0);
    mul_ln15_2_fu_663_p0 <= mul_ln15_2_fu_663_p00(17 - 1 downto 0);
    mul_ln15_2_fu_663_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln15_reg_938),35));
    mul_ln15_2_fu_663_p1 <= ap_const_lv35_20203(19 - 1 downto 0);
    mul_ln16_1_fu_580_p0 <= mul_ln16_1_fu_580_p00(8 - 1 downto 0);
    mul_ln16_1_fu_580_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dst_b_reg_898),16));
    mul_ln16_1_fu_580_p1 <= zext_ln31_1_cast_reg_783(8 - 1 downto 0);
    mul_ln16_2_fu_672_p0 <= mul_ln16_2_fu_672_p00(17 - 1 downto 0);
    mul_ln16_2_fu_672_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln16_reg_943),35));
    mul_ln16_2_fu_672_p1 <= ap_const_lv35_20203(19 - 1 downto 0);
    or_ln18_1_fu_698_p4 <= ((dst_r_1_reg_954 & tmp_1_reg_964) & dst_b_1_reg_959);
    or_ln30_fu_294_p2 <= (icmp_ln31_fu_289_p2 or ap_phi_mux_first_iter_0_phi_fu_234_p4);
    p_cast_mid2_v_fu_536_p3 <= (select_ln30_1_reg_828_pp0_iter13_reg & ap_const_lv7_0);
    p_mid112_fu_400_p2 <= std_logic_vector(unsigned(p_shl_cast_mid1_fu_392_p1) + unsigned(p_shl1_cast_mid1_fu_396_p1));
    p_mid_fu_371_p3 <= (add_ln30_3_reg_822 & ap_const_lv9_0);
    p_shl1_cast_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_343_p3),23));
    p_shl1_cast_mid1_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_mid_fu_371_p3),23));
    p_shl_cast_fu_357_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_350_p3),23));
    p_shl_cast_mid1_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_mid1_fu_385_p3),23));
    p_shl_fu_350_p3 <= (y_1_reg_797 & ap_const_lv11_0);
    p_shl_mid1_fu_385_p3 <= (add_ln30_3_reg_822 & ap_const_lv11_0);
    select_ln30_1_fu_314_p3 <= 
        add_ln30_3_fu_308_p2 when (icmp_ln31_fu_289_p2(0) = '1') else 
        y_fu_136;
    select_ln30_2_fu_378_p3 <= 
        p_mid_fu_371_p3 when (icmp_ln31_reg_807(0) = '1') else 
        tmp_fu_343_p3;
    select_ln30_3_fu_406_p3 <= 
        p_mid112_fu_400_p2 when (icmp_ln31_reg_807(0) = '1') else 
        empty_fu_365_p2;
    select_ln30_fu_300_p3 <= 
        ap_const_lv11_0 when (icmp_ln31_fu_289_p2(0) = '1') else 
        x_fu_132;
        sext_ln30_1_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln31_1_mid2_v_reg_843),64));

        sext_ln30_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln31_mid2_v_reg_838),64));

        sext_ln33_fu_631_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_621_p4),64));

    shl_ln_fu_605_p3 <= (add_ln33_1_reg_928 & ap_const_lv2_0);
    src_b_fu_479_p1 <= m_axi_src_RDATA(8 - 1 downto 0);

    src_blk_n_AR_assign_proc : process(ap_enable_reg_pp0_iter3, m_axi_src_ARREADY, or_ln30_reg_813_pp0_iter2_reg, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (or_ln30_reg_813_pp0_iter2_reg = ap_const_lv1_1))) then 
            src_blk_n_AR <= m_axi_src_ARREADY;
        else 
            src_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    src_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter11, m_axi_src_RVALID, icmp_ln30_reg_803_pp0_iter10_reg, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln30_reg_803_pp0_iter10_reg = ap_const_lv1_0))) then 
            src_blk_n_R <= m_axi_src_RVALID;
        else 
            src_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    tmp_fu_343_p3 <= (y_1_reg_797 & ap_const_lv9_0);
    trunc_ln_fu_621_p4 <= add_ln33_fu_616_p2(63 downto 2);
    x_1_fu_322_p2 <= std_logic_vector(unsigned(select_ln30_fu_300_p3) + unsigned(ap_const_lv11_1));
    zext_ln30_1_fu_547_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln30_2_reg_833_pp0_iter13_reg),21));
    zext_ln30_2_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln30_3_fu_406_p3),64));
    zext_ln30_fu_543_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_cast_mid2_v_fu_536_p3),19));
    zext_ln31_1_cast_fu_246_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln31_1),16));
    zext_ln31_cast_fu_242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln31),32));
    zext_ln33_2_fu_595_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln33_2_fu_589_p2),21));
    zext_ln33_3_fu_612_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_605_p3),64));
    zext_ln33_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln30_reg_817_pp0_iter13_reg),19));
end behav;
