-- ==============================================================
-- Generated by Vitis HLS v2023.1.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bitblt is
generic (
    C_M_AXI_SRC_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_SRC_ID_WIDTH : INTEGER := 1;
    C_M_AXI_SRC_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_SRC_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_SRC_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_SRC_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_SRC_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_SRC_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DST_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_DST_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DST_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DST_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DST_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DST_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DST_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DST_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DST_USER_VALUE : INTEGER := 0;
    C_M_AXI_DST_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DST_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_SRC_USER_VALUE : INTEGER := 0;
    C_M_AXI_SRC_PROT_VALUE : INTEGER := 0;
    C_M_AXI_SRC_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_src_AWVALID : OUT STD_LOGIC;
    m_axi_src_AWREADY : IN STD_LOGIC;
    m_axi_src_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_SRC_ADDR_WIDTH-1 downto 0);
    m_axi_src_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_SRC_ID_WIDTH-1 downto 0);
    m_axi_src_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_src_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_src_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_src_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_src_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_src_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_src_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_src_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_src_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_SRC_AWUSER_WIDTH-1 downto 0);
    m_axi_src_WVALID : OUT STD_LOGIC;
    m_axi_src_WREADY : IN STD_LOGIC;
    m_axi_src_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_SRC_DATA_WIDTH-1 downto 0);
    m_axi_src_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_SRC_DATA_WIDTH/8-1 downto 0);
    m_axi_src_WLAST : OUT STD_LOGIC;
    m_axi_src_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_SRC_ID_WIDTH-1 downto 0);
    m_axi_src_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_SRC_WUSER_WIDTH-1 downto 0);
    m_axi_src_ARVALID : OUT STD_LOGIC;
    m_axi_src_ARREADY : IN STD_LOGIC;
    m_axi_src_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_SRC_ADDR_WIDTH-1 downto 0);
    m_axi_src_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_SRC_ID_WIDTH-1 downto 0);
    m_axi_src_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_src_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_src_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_src_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_src_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_src_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_src_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_src_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_src_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_SRC_ARUSER_WIDTH-1 downto 0);
    m_axi_src_RVALID : IN STD_LOGIC;
    m_axi_src_RREADY : OUT STD_LOGIC;
    m_axi_src_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_SRC_DATA_WIDTH-1 downto 0);
    m_axi_src_RLAST : IN STD_LOGIC;
    m_axi_src_RID : IN STD_LOGIC_VECTOR (C_M_AXI_SRC_ID_WIDTH-1 downto 0);
    m_axi_src_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_SRC_RUSER_WIDTH-1 downto 0);
    m_axi_src_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_src_BVALID : IN STD_LOGIC;
    m_axi_src_BREADY : OUT STD_LOGIC;
    m_axi_src_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_src_BID : IN STD_LOGIC_VECTOR (C_M_AXI_SRC_ID_WIDTH-1 downto 0);
    m_axi_src_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_SRC_BUSER_WIDTH-1 downto 0);
    m_axi_dst_AWVALID : OUT STD_LOGIC;
    m_axi_dst_AWREADY : IN STD_LOGIC;
    m_axi_dst_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DST_ADDR_WIDTH-1 downto 0);
    m_axi_dst_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DST_ID_WIDTH-1 downto 0);
    m_axi_dst_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_dst_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_dst_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dst_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dst_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dst_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_dst_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dst_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dst_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DST_AWUSER_WIDTH-1 downto 0);
    m_axi_dst_WVALID : OUT STD_LOGIC;
    m_axi_dst_WREADY : IN STD_LOGIC;
    m_axi_dst_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DST_DATA_WIDTH-1 downto 0);
    m_axi_dst_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DST_DATA_WIDTH/8-1 downto 0);
    m_axi_dst_WLAST : OUT STD_LOGIC;
    m_axi_dst_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DST_ID_WIDTH-1 downto 0);
    m_axi_dst_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DST_WUSER_WIDTH-1 downto 0);
    m_axi_dst_ARVALID : OUT STD_LOGIC;
    m_axi_dst_ARREADY : IN STD_LOGIC;
    m_axi_dst_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DST_ADDR_WIDTH-1 downto 0);
    m_axi_dst_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DST_ID_WIDTH-1 downto 0);
    m_axi_dst_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_dst_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_dst_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dst_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dst_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dst_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_dst_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dst_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dst_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DST_ARUSER_WIDTH-1 downto 0);
    m_axi_dst_RVALID : IN STD_LOGIC;
    m_axi_dst_RREADY : OUT STD_LOGIC;
    m_axi_dst_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DST_DATA_WIDTH-1 downto 0);
    m_axi_dst_RLAST : IN STD_LOGIC;
    m_axi_dst_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DST_ID_WIDTH-1 downto 0);
    m_axi_dst_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DST_RUSER_WIDTH-1 downto 0);
    m_axi_dst_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dst_BVALID : IN STD_LOGIC;
    m_axi_dst_BREADY : OUT STD_LOGIC;
    m_axi_dst_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dst_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DST_ID_WIDTH-1 downto 0);
    m_axi_dst_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DST_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of bitblt is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "bitblt_bitblt,hls_ip_2023_1_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=76824,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=0,HLS_SYN_FF=3029,HLS_SYN_LUT=2989,HLS_VERSION=2023_1_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal src_in : STD_LOGIC_VECTOR (63 downto 0);
    signal dst_in : STD_LOGIC_VECTOR (63 downto 0);
    signal dst_out : STD_LOGIC_VECTOR (63 downto 0);
    signal alpha : STD_LOGIC_VECTOR (7 downto 0);
    signal width : STD_LOGIC_VECTOR (10 downto 0);
    signal height : STD_LOGIC_VECTOR (10 downto 0);
    signal width_read_reg_146 : STD_LOGIC_VECTOR (10 downto 0);
    signal alpha_read_reg_152 : STD_LOGIC_VECTOR (7 downto 0);
    signal dst_out_read_reg_158 : STD_LOGIC_VECTOR (63 downto 0);
    signal dst_in_read_reg_163 : STD_LOGIC_VECTOR (63 downto 0);
    signal src_in_read_reg_168 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln22_fu_134_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln22_reg_173 : STD_LOGIC_VECTOR (21 downto 0);
    signal c_alpha_fu_140_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal c_alpha_reg_178 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_ap_start : STD_LOGIC;
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_ap_done : STD_LOGIC;
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_ap_idle : STD_LOGIC;
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_ap_ready : STD_LOGIC;
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_AWVALID : STD_LOGIC;
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_WVALID : STD_LOGIC;
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_WLAST : STD_LOGIC;
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_ARVALID : STD_LOGIC;
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_RREADY : STD_LOGIC;
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_BREADY : STD_LOGIC;
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_AWVALID : STD_LOGIC;
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_WVALID : STD_LOGIC;
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_WLAST : STD_LOGIC;
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_ARVALID : STD_LOGIC;
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_RREADY : STD_LOGIC;
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_BREADY : STD_LOGIC;
    signal dst_AWVALID : STD_LOGIC;
    signal dst_AWREADY : STD_LOGIC;
    signal dst_WVALID : STD_LOGIC;
    signal dst_WREADY : STD_LOGIC;
    signal dst_ARVALID : STD_LOGIC;
    signal dst_ARREADY : STD_LOGIC;
    signal dst_RVALID : STD_LOGIC;
    signal dst_RREADY : STD_LOGIC;
    signal dst_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal dst_BVALID : STD_LOGIC;
    signal dst_BREADY : STD_LOGIC;
    signal src_AWREADY : STD_LOGIC;
    signal src_WREADY : STD_LOGIC;
    signal src_ARVALID : STD_LOGIC;
    signal src_ARREADY : STD_LOGIC;
    signal src_RVALID : STD_LOGIC;
    signal src_RREADY : STD_LOGIC;
    signal src_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal src_RFIFONUM : STD_LOGIC_VECTOR (9 downto 0);
    signal src_BVALID : STD_LOGIC;
    signal grp_bitblt_Pipeline_horiz_loop_fu_110_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal mul_ln22_fu_134_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln22_fu_134_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal mul_ln22_fu_134_p00 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln22_fu_134_p10 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component bitblt_bitblt_Pipeline_horiz_loop IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_src_AWVALID : OUT STD_LOGIC;
        m_axi_src_AWREADY : IN STD_LOGIC;
        m_axi_src_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_src_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_src_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_src_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_src_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_src_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_src_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_src_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_src_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_src_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_src_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_src_WVALID : OUT STD_LOGIC;
        m_axi_src_WREADY : IN STD_LOGIC;
        m_axi_src_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_src_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_src_WLAST : OUT STD_LOGIC;
        m_axi_src_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_src_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_src_ARVALID : OUT STD_LOGIC;
        m_axi_src_ARREADY : IN STD_LOGIC;
        m_axi_src_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_src_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_src_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_src_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_src_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_src_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_src_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_src_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_src_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_src_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_src_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_src_RVALID : IN STD_LOGIC;
        m_axi_src_RREADY : OUT STD_LOGIC;
        m_axi_src_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_src_RLAST : IN STD_LOGIC;
        m_axi_src_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_src_RFIFONUM : IN STD_LOGIC_VECTOR (9 downto 0);
        m_axi_src_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_src_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_src_BVALID : IN STD_LOGIC;
        m_axi_src_BREADY : OUT STD_LOGIC;
        m_axi_src_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_src_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_src_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_dst_AWVALID : OUT STD_LOGIC;
        m_axi_dst_AWREADY : IN STD_LOGIC;
        m_axi_dst_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_dst_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_dst_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_dst_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_dst_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_dst_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_dst_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_dst_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_dst_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_dst_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_dst_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_dst_WVALID : OUT STD_LOGIC;
        m_axi_dst_WREADY : IN STD_LOGIC;
        m_axi_dst_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_dst_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_dst_WLAST : OUT STD_LOGIC;
        m_axi_dst_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_dst_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_dst_ARVALID : OUT STD_LOGIC;
        m_axi_dst_ARREADY : IN STD_LOGIC;
        m_axi_dst_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_dst_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_dst_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_dst_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_dst_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_dst_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_dst_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_dst_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_dst_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_dst_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_dst_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_dst_RVALID : IN STD_LOGIC;
        m_axi_dst_RREADY : OUT STD_LOGIC;
        m_axi_dst_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_dst_RLAST : IN STD_LOGIC;
        m_axi_dst_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_dst_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_dst_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_dst_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_dst_BVALID : IN STD_LOGIC;
        m_axi_dst_BREADY : OUT STD_LOGIC;
        m_axi_dst_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_dst_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_dst_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        mul_ln22 : IN STD_LOGIC_VECTOR (21 downto 0);
        alpha_cast : IN STD_LOGIC_VECTOR (7 downto 0);
        zext_ln31_1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dst_out : IN STD_LOGIC_VECTOR (63 downto 0);
        zext_ln31 : IN STD_LOGIC_VECTOR (10 downto 0);
        width : IN STD_LOGIC_VECTOR (10 downto 0);
        src_in : IN STD_LOGIC_VECTOR (63 downto 0);
        dst_in : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component bitblt_mul_11ns_11ns_22_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component bitblt_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        src_in : OUT STD_LOGIC_VECTOR (63 downto 0);
        dst_in : OUT STD_LOGIC_VECTOR (63 downto 0);
        dst_out : OUT STD_LOGIC_VECTOR (63 downto 0);
        alpha : OUT STD_LOGIC_VECTOR (7 downto 0);
        width : OUT STD_LOGIC_VECTOR (10 downto 0);
        height : OUT STD_LOGIC_VECTOR (10 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component bitblt_dst_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component bitblt_src_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (9 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;



begin
    grp_bitblt_Pipeline_horiz_loop_fu_110 : component bitblt_bitblt_Pipeline_horiz_loop
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_bitblt_Pipeline_horiz_loop_fu_110_ap_start,
        ap_done => grp_bitblt_Pipeline_horiz_loop_fu_110_ap_done,
        ap_idle => grp_bitblt_Pipeline_horiz_loop_fu_110_ap_idle,
        ap_ready => grp_bitblt_Pipeline_horiz_loop_fu_110_ap_ready,
        m_axi_src_AWVALID => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_AWVALID,
        m_axi_src_AWREADY => ap_const_logic_0,
        m_axi_src_AWADDR => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_AWADDR,
        m_axi_src_AWID => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_AWID,
        m_axi_src_AWLEN => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_AWLEN,
        m_axi_src_AWSIZE => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_AWSIZE,
        m_axi_src_AWBURST => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_AWBURST,
        m_axi_src_AWLOCK => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_AWLOCK,
        m_axi_src_AWCACHE => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_AWCACHE,
        m_axi_src_AWPROT => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_AWPROT,
        m_axi_src_AWQOS => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_AWQOS,
        m_axi_src_AWREGION => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_AWREGION,
        m_axi_src_AWUSER => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_AWUSER,
        m_axi_src_WVALID => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_WVALID,
        m_axi_src_WREADY => ap_const_logic_0,
        m_axi_src_WDATA => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_WDATA,
        m_axi_src_WSTRB => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_WSTRB,
        m_axi_src_WLAST => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_WLAST,
        m_axi_src_WID => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_WID,
        m_axi_src_WUSER => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_WUSER,
        m_axi_src_ARVALID => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_ARVALID,
        m_axi_src_ARREADY => src_ARREADY,
        m_axi_src_ARADDR => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_ARADDR,
        m_axi_src_ARID => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_ARID,
        m_axi_src_ARLEN => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_ARLEN,
        m_axi_src_ARSIZE => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_ARSIZE,
        m_axi_src_ARBURST => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_ARBURST,
        m_axi_src_ARLOCK => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_ARLOCK,
        m_axi_src_ARCACHE => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_ARCACHE,
        m_axi_src_ARPROT => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_ARPROT,
        m_axi_src_ARQOS => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_ARQOS,
        m_axi_src_ARREGION => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_ARREGION,
        m_axi_src_ARUSER => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_ARUSER,
        m_axi_src_RVALID => src_RVALID,
        m_axi_src_RREADY => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_RREADY,
        m_axi_src_RDATA => src_RDATA,
        m_axi_src_RLAST => ap_const_logic_0,
        m_axi_src_RID => ap_const_lv1_0,
        m_axi_src_RFIFONUM => src_RFIFONUM,
        m_axi_src_RUSER => ap_const_lv1_0,
        m_axi_src_RRESP => ap_const_lv2_0,
        m_axi_src_BVALID => ap_const_logic_0,
        m_axi_src_BREADY => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_BREADY,
        m_axi_src_BRESP => ap_const_lv2_0,
        m_axi_src_BID => ap_const_lv1_0,
        m_axi_src_BUSER => ap_const_lv1_0,
        m_axi_dst_AWVALID => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_AWVALID,
        m_axi_dst_AWREADY => dst_AWREADY,
        m_axi_dst_AWADDR => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_AWADDR,
        m_axi_dst_AWID => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_AWID,
        m_axi_dst_AWLEN => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_AWLEN,
        m_axi_dst_AWSIZE => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_AWSIZE,
        m_axi_dst_AWBURST => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_AWBURST,
        m_axi_dst_AWLOCK => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_AWLOCK,
        m_axi_dst_AWCACHE => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_AWCACHE,
        m_axi_dst_AWPROT => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_AWPROT,
        m_axi_dst_AWQOS => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_AWQOS,
        m_axi_dst_AWREGION => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_AWREGION,
        m_axi_dst_AWUSER => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_AWUSER,
        m_axi_dst_WVALID => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_WVALID,
        m_axi_dst_WREADY => dst_WREADY,
        m_axi_dst_WDATA => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_WDATA,
        m_axi_dst_WSTRB => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_WSTRB,
        m_axi_dst_WLAST => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_WLAST,
        m_axi_dst_WID => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_WID,
        m_axi_dst_WUSER => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_WUSER,
        m_axi_dst_ARVALID => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_ARVALID,
        m_axi_dst_ARREADY => dst_ARREADY,
        m_axi_dst_ARADDR => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_ARADDR,
        m_axi_dst_ARID => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_ARID,
        m_axi_dst_ARLEN => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_ARLEN,
        m_axi_dst_ARSIZE => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_ARSIZE,
        m_axi_dst_ARBURST => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_ARBURST,
        m_axi_dst_ARLOCK => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_ARLOCK,
        m_axi_dst_ARCACHE => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_ARCACHE,
        m_axi_dst_ARPROT => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_ARPROT,
        m_axi_dst_ARQOS => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_ARQOS,
        m_axi_dst_ARREGION => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_ARREGION,
        m_axi_dst_ARUSER => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_ARUSER,
        m_axi_dst_RVALID => dst_RVALID,
        m_axi_dst_RREADY => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_RREADY,
        m_axi_dst_RDATA => dst_RDATA,
        m_axi_dst_RLAST => ap_const_logic_0,
        m_axi_dst_RID => ap_const_lv1_0,
        m_axi_dst_RFIFONUM => dst_RFIFONUM,
        m_axi_dst_RUSER => ap_const_lv1_0,
        m_axi_dst_RRESP => ap_const_lv2_0,
        m_axi_dst_BVALID => dst_BVALID,
        m_axi_dst_BREADY => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_BREADY,
        m_axi_dst_BRESP => ap_const_lv2_0,
        m_axi_dst_BID => ap_const_lv1_0,
        m_axi_dst_BUSER => ap_const_lv1_0,
        mul_ln22 => mul_ln22_reg_173,
        alpha_cast => alpha_read_reg_152,
        zext_ln31_1 => c_alpha_reg_178,
        dst_out => dst_out_read_reg_158,
        zext_ln31 => width_read_reg_146,
        width => width_read_reg_146,
        src_in => src_in_read_reg_168,
        dst_in => dst_in_read_reg_163);

    control_s_axi_U : component bitblt_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        src_in => src_in,
        dst_in => dst_in,
        dst_out => dst_out,
        alpha => alpha,
        width => width,
        height => height,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    dst_m_axi_U : component bitblt_dst_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 32,
        C_M_AXI_ID_WIDTH => C_M_AXI_DST_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DST_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DST_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DST_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DST_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DST_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DST_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DST_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DST_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DST_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DST_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 32,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_dst_AWVALID,
        AWREADY => m_axi_dst_AWREADY,
        AWADDR => m_axi_dst_AWADDR,
        AWID => m_axi_dst_AWID,
        AWLEN => m_axi_dst_AWLEN,
        AWSIZE => m_axi_dst_AWSIZE,
        AWBURST => m_axi_dst_AWBURST,
        AWLOCK => m_axi_dst_AWLOCK,
        AWCACHE => m_axi_dst_AWCACHE,
        AWPROT => m_axi_dst_AWPROT,
        AWQOS => m_axi_dst_AWQOS,
        AWREGION => m_axi_dst_AWREGION,
        AWUSER => m_axi_dst_AWUSER,
        WVALID => m_axi_dst_WVALID,
        WREADY => m_axi_dst_WREADY,
        WDATA => m_axi_dst_WDATA,
        WSTRB => m_axi_dst_WSTRB,
        WLAST => m_axi_dst_WLAST,
        WID => m_axi_dst_WID,
        WUSER => m_axi_dst_WUSER,
        ARVALID => m_axi_dst_ARVALID,
        ARREADY => m_axi_dst_ARREADY,
        ARADDR => m_axi_dst_ARADDR,
        ARID => m_axi_dst_ARID,
        ARLEN => m_axi_dst_ARLEN,
        ARSIZE => m_axi_dst_ARSIZE,
        ARBURST => m_axi_dst_ARBURST,
        ARLOCK => m_axi_dst_ARLOCK,
        ARCACHE => m_axi_dst_ARCACHE,
        ARPROT => m_axi_dst_ARPROT,
        ARQOS => m_axi_dst_ARQOS,
        ARREGION => m_axi_dst_ARREGION,
        ARUSER => m_axi_dst_ARUSER,
        RVALID => m_axi_dst_RVALID,
        RREADY => m_axi_dst_RREADY,
        RDATA => m_axi_dst_RDATA,
        RLAST => m_axi_dst_RLAST,
        RID => m_axi_dst_RID,
        RUSER => m_axi_dst_RUSER,
        RRESP => m_axi_dst_RRESP,
        BVALID => m_axi_dst_BVALID,
        BREADY => m_axi_dst_BREADY,
        BRESP => m_axi_dst_BRESP,
        BID => m_axi_dst_BID,
        BUSER => m_axi_dst_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => dst_ARVALID,
        I_ARREADY => dst_ARREADY,
        I_ARADDR => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_ARADDR,
        I_ARLEN => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_ARLEN,
        I_RVALID => dst_RVALID,
        I_RREADY => dst_RREADY,
        I_RDATA => dst_RDATA,
        I_RFIFONUM => dst_RFIFONUM,
        I_AWVALID => dst_AWVALID,
        I_AWREADY => dst_AWREADY,
        I_AWADDR => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_AWADDR,
        I_AWLEN => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_AWLEN,
        I_WVALID => dst_WVALID,
        I_WREADY => dst_WREADY,
        I_WDATA => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_WDATA,
        I_WSTRB => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_WSTRB,
        I_BVALID => dst_BVALID,
        I_BREADY => dst_BREADY);

    src_m_axi_U : component bitblt_src_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        MAX_READ_BURST_LENGTH => 32,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_SRC_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_SRC_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_SRC_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_SRC_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_SRC_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_SRC_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_SRC_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_SRC_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_SRC_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_SRC_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_SRC_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 10,
        USER_DW => 32,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_src_AWVALID,
        AWREADY => m_axi_src_AWREADY,
        AWADDR => m_axi_src_AWADDR,
        AWID => m_axi_src_AWID,
        AWLEN => m_axi_src_AWLEN,
        AWSIZE => m_axi_src_AWSIZE,
        AWBURST => m_axi_src_AWBURST,
        AWLOCK => m_axi_src_AWLOCK,
        AWCACHE => m_axi_src_AWCACHE,
        AWPROT => m_axi_src_AWPROT,
        AWQOS => m_axi_src_AWQOS,
        AWREGION => m_axi_src_AWREGION,
        AWUSER => m_axi_src_AWUSER,
        WVALID => m_axi_src_WVALID,
        WREADY => m_axi_src_WREADY,
        WDATA => m_axi_src_WDATA,
        WSTRB => m_axi_src_WSTRB,
        WLAST => m_axi_src_WLAST,
        WID => m_axi_src_WID,
        WUSER => m_axi_src_WUSER,
        ARVALID => m_axi_src_ARVALID,
        ARREADY => m_axi_src_ARREADY,
        ARADDR => m_axi_src_ARADDR,
        ARID => m_axi_src_ARID,
        ARLEN => m_axi_src_ARLEN,
        ARSIZE => m_axi_src_ARSIZE,
        ARBURST => m_axi_src_ARBURST,
        ARLOCK => m_axi_src_ARLOCK,
        ARCACHE => m_axi_src_ARCACHE,
        ARPROT => m_axi_src_ARPROT,
        ARQOS => m_axi_src_ARQOS,
        ARREGION => m_axi_src_ARREGION,
        ARUSER => m_axi_src_ARUSER,
        RVALID => m_axi_src_RVALID,
        RREADY => m_axi_src_RREADY,
        RDATA => m_axi_src_RDATA,
        RLAST => m_axi_src_RLAST,
        RID => m_axi_src_RID,
        RUSER => m_axi_src_RUSER,
        RRESP => m_axi_src_RRESP,
        BVALID => m_axi_src_BVALID,
        BREADY => m_axi_src_BREADY,
        BRESP => m_axi_src_BRESP,
        BID => m_axi_src_BID,
        BUSER => m_axi_src_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => src_ARVALID,
        I_ARREADY => src_ARREADY,
        I_ARADDR => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_ARADDR,
        I_ARLEN => grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_ARLEN,
        I_RVALID => src_RVALID,
        I_RREADY => src_RREADY,
        I_RDATA => src_RDATA,
        I_RFIFONUM => src_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => src_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => src_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => src_BVALID,
        I_BREADY => ap_const_logic_0);

    mul_11ns_11ns_22_1_1_U23 : component bitblt_mul_11ns_11ns_22_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 11,
        dout_WIDTH => 22)
    port map (
        din0 => mul_ln22_fu_134_p0,
        din1 => mul_ln22_fu_134_p1,
        dout => mul_ln22_fu_134_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_bitblt_Pipeline_horiz_loop_fu_110_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_bitblt_Pipeline_horiz_loop_fu_110_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_bitblt_Pipeline_horiz_loop_fu_110_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_bitblt_Pipeline_horiz_loop_fu_110_ap_ready = ap_const_logic_1)) then 
                    grp_bitblt_Pipeline_horiz_loop_fu_110_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                alpha_read_reg_152 <= alpha;
                dst_in_read_reg_163 <= dst_in;
                dst_out_read_reg_158 <= dst_out;
                mul_ln22_reg_173 <= mul_ln22_fu_134_p2;
                src_in_read_reg_168 <= src_in;
                width_read_reg_146 <= width;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                c_alpha_reg_178 <= c_alpha_fu_140_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_bitblt_Pipeline_horiz_loop_fu_110_ap_done, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_bitblt_Pipeline_horiz_loop_fu_110_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_bitblt_Pipeline_horiz_loop_fu_110_ap_done)
    begin
        if ((grp_bitblt_Pipeline_horiz_loop_fu_110_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(grp_bitblt_Pipeline_horiz_loop_fu_110_ap_done, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_bitblt_Pipeline_horiz_loop_fu_110_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_bitblt_Pipeline_horiz_loop_fu_110_ap_done, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_bitblt_Pipeline_horiz_loop_fu_110_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    c_alpha_fu_140_p2 <= (ap_const_lv8_FF xor alpha_read_reg_152);

    dst_ARVALID_assign_proc : process(ap_CS_fsm_state2, grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_ARVALID, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            dst_ARVALID <= grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_ARVALID;
        else 
            dst_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    dst_AWVALID_assign_proc : process(ap_CS_fsm_state2, grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_AWVALID, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            dst_AWVALID <= grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_AWVALID;
        else 
            dst_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    dst_BREADY_assign_proc : process(ap_CS_fsm_state2, grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_BREADY, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            dst_BREADY <= grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_BREADY;
        else 
            dst_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    dst_RREADY_assign_proc : process(ap_CS_fsm_state2, grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_RREADY, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            dst_RREADY <= grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_RREADY;
        else 
            dst_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    dst_WVALID_assign_proc : process(ap_CS_fsm_state2, grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_WVALID, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            dst_WVALID <= grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_WVALID;
        else 
            dst_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    grp_bitblt_Pipeline_horiz_loop_fu_110_ap_start <= grp_bitblt_Pipeline_horiz_loop_fu_110_ap_start_reg;
    mul_ln22_fu_134_p0 <= mul_ln22_fu_134_p00(11 - 1 downto 0);
    mul_ln22_fu_134_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(height),22));
    mul_ln22_fu_134_p1 <= mul_ln22_fu_134_p10(11 - 1 downto 0);
    mul_ln22_fu_134_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(width),22));

    src_ARVALID_assign_proc : process(ap_CS_fsm_state2, grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_ARVALID, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            src_ARVALID <= grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_ARVALID;
        else 
            src_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    src_RREADY_assign_proc : process(ap_CS_fsm_state2, grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_RREADY, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            src_RREADY <= grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_RREADY;
        else 
            src_RREADY <= ap_const_logic_0;
        end if; 
    end process;

end behav;
