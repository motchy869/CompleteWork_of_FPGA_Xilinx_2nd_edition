// ==============================================================
// Generated by Vitis HLS v2023.1.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="bitblt_bitblt,hls_ip_2023_1_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=76824,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=0,HLS_SYN_FF=3029,HLS_SYN_LUT=2989,HLS_VERSION=2023_1_1}" *)

module bitblt (
        ap_clk,
        ap_rst_n,
        m_axi_src_AWVALID,
        m_axi_src_AWREADY,
        m_axi_src_AWADDR,
        m_axi_src_AWID,
        m_axi_src_AWLEN,
        m_axi_src_AWSIZE,
        m_axi_src_AWBURST,
        m_axi_src_AWLOCK,
        m_axi_src_AWCACHE,
        m_axi_src_AWPROT,
        m_axi_src_AWQOS,
        m_axi_src_AWREGION,
        m_axi_src_AWUSER,
        m_axi_src_WVALID,
        m_axi_src_WREADY,
        m_axi_src_WDATA,
        m_axi_src_WSTRB,
        m_axi_src_WLAST,
        m_axi_src_WID,
        m_axi_src_WUSER,
        m_axi_src_ARVALID,
        m_axi_src_ARREADY,
        m_axi_src_ARADDR,
        m_axi_src_ARID,
        m_axi_src_ARLEN,
        m_axi_src_ARSIZE,
        m_axi_src_ARBURST,
        m_axi_src_ARLOCK,
        m_axi_src_ARCACHE,
        m_axi_src_ARPROT,
        m_axi_src_ARQOS,
        m_axi_src_ARREGION,
        m_axi_src_ARUSER,
        m_axi_src_RVALID,
        m_axi_src_RREADY,
        m_axi_src_RDATA,
        m_axi_src_RLAST,
        m_axi_src_RID,
        m_axi_src_RUSER,
        m_axi_src_RRESP,
        m_axi_src_BVALID,
        m_axi_src_BREADY,
        m_axi_src_BRESP,
        m_axi_src_BID,
        m_axi_src_BUSER,
        m_axi_dst_AWVALID,
        m_axi_dst_AWREADY,
        m_axi_dst_AWADDR,
        m_axi_dst_AWID,
        m_axi_dst_AWLEN,
        m_axi_dst_AWSIZE,
        m_axi_dst_AWBURST,
        m_axi_dst_AWLOCK,
        m_axi_dst_AWCACHE,
        m_axi_dst_AWPROT,
        m_axi_dst_AWQOS,
        m_axi_dst_AWREGION,
        m_axi_dst_AWUSER,
        m_axi_dst_WVALID,
        m_axi_dst_WREADY,
        m_axi_dst_WDATA,
        m_axi_dst_WSTRB,
        m_axi_dst_WLAST,
        m_axi_dst_WID,
        m_axi_dst_WUSER,
        m_axi_dst_ARVALID,
        m_axi_dst_ARREADY,
        m_axi_dst_ARADDR,
        m_axi_dst_ARID,
        m_axi_dst_ARLEN,
        m_axi_dst_ARSIZE,
        m_axi_dst_ARBURST,
        m_axi_dst_ARLOCK,
        m_axi_dst_ARCACHE,
        m_axi_dst_ARPROT,
        m_axi_dst_ARQOS,
        m_axi_dst_ARREGION,
        m_axi_dst_ARUSER,
        m_axi_dst_RVALID,
        m_axi_dst_RREADY,
        m_axi_dst_RDATA,
        m_axi_dst_RLAST,
        m_axi_dst_RID,
        m_axi_dst_RUSER,
        m_axi_dst_RRESP,
        m_axi_dst_BVALID,
        m_axi_dst_BREADY,
        m_axi_dst_BRESP,
        m_axi_dst_BID,
        m_axi_dst_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_DST_ID_WIDTH = 1;
parameter    C_M_AXI_DST_ADDR_WIDTH = 64;
parameter    C_M_AXI_DST_DATA_WIDTH = 32;
parameter    C_M_AXI_DST_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DST_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DST_WUSER_WIDTH = 1;
parameter    C_M_AXI_DST_RUSER_WIDTH = 1;
parameter    C_M_AXI_DST_BUSER_WIDTH = 1;
parameter    C_M_AXI_DST_USER_VALUE = 0;
parameter    C_M_AXI_DST_PROT_VALUE = 0;
parameter    C_M_AXI_DST_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_SRC_ID_WIDTH = 1;
parameter    C_M_AXI_SRC_ADDR_WIDTH = 64;
parameter    C_M_AXI_SRC_DATA_WIDTH = 32;
parameter    C_M_AXI_SRC_AWUSER_WIDTH = 1;
parameter    C_M_AXI_SRC_ARUSER_WIDTH = 1;
parameter    C_M_AXI_SRC_WUSER_WIDTH = 1;
parameter    C_M_AXI_SRC_RUSER_WIDTH = 1;
parameter    C_M_AXI_SRC_BUSER_WIDTH = 1;
parameter    C_M_AXI_SRC_USER_VALUE = 0;
parameter    C_M_AXI_SRC_PROT_VALUE = 0;
parameter    C_M_AXI_SRC_CACHE_VALUE = 3;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DST_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_SRC_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_src_AWVALID;
input   m_axi_src_AWREADY;
output  [C_M_AXI_SRC_ADDR_WIDTH - 1:0] m_axi_src_AWADDR;
output  [C_M_AXI_SRC_ID_WIDTH - 1:0] m_axi_src_AWID;
output  [7:0] m_axi_src_AWLEN;
output  [2:0] m_axi_src_AWSIZE;
output  [1:0] m_axi_src_AWBURST;
output  [1:0] m_axi_src_AWLOCK;
output  [3:0] m_axi_src_AWCACHE;
output  [2:0] m_axi_src_AWPROT;
output  [3:0] m_axi_src_AWQOS;
output  [3:0] m_axi_src_AWREGION;
output  [C_M_AXI_SRC_AWUSER_WIDTH - 1:0] m_axi_src_AWUSER;
output   m_axi_src_WVALID;
input   m_axi_src_WREADY;
output  [C_M_AXI_SRC_DATA_WIDTH - 1:0] m_axi_src_WDATA;
output  [C_M_AXI_SRC_WSTRB_WIDTH - 1:0] m_axi_src_WSTRB;
output   m_axi_src_WLAST;
output  [C_M_AXI_SRC_ID_WIDTH - 1:0] m_axi_src_WID;
output  [C_M_AXI_SRC_WUSER_WIDTH - 1:0] m_axi_src_WUSER;
output   m_axi_src_ARVALID;
input   m_axi_src_ARREADY;
output  [C_M_AXI_SRC_ADDR_WIDTH - 1:0] m_axi_src_ARADDR;
output  [C_M_AXI_SRC_ID_WIDTH - 1:0] m_axi_src_ARID;
output  [7:0] m_axi_src_ARLEN;
output  [2:0] m_axi_src_ARSIZE;
output  [1:0] m_axi_src_ARBURST;
output  [1:0] m_axi_src_ARLOCK;
output  [3:0] m_axi_src_ARCACHE;
output  [2:0] m_axi_src_ARPROT;
output  [3:0] m_axi_src_ARQOS;
output  [3:0] m_axi_src_ARREGION;
output  [C_M_AXI_SRC_ARUSER_WIDTH - 1:0] m_axi_src_ARUSER;
input   m_axi_src_RVALID;
output   m_axi_src_RREADY;
input  [C_M_AXI_SRC_DATA_WIDTH - 1:0] m_axi_src_RDATA;
input   m_axi_src_RLAST;
input  [C_M_AXI_SRC_ID_WIDTH - 1:0] m_axi_src_RID;
input  [C_M_AXI_SRC_RUSER_WIDTH - 1:0] m_axi_src_RUSER;
input  [1:0] m_axi_src_RRESP;
input   m_axi_src_BVALID;
output   m_axi_src_BREADY;
input  [1:0] m_axi_src_BRESP;
input  [C_M_AXI_SRC_ID_WIDTH - 1:0] m_axi_src_BID;
input  [C_M_AXI_SRC_BUSER_WIDTH - 1:0] m_axi_src_BUSER;
output   m_axi_dst_AWVALID;
input   m_axi_dst_AWREADY;
output  [C_M_AXI_DST_ADDR_WIDTH - 1:0] m_axi_dst_AWADDR;
output  [C_M_AXI_DST_ID_WIDTH - 1:0] m_axi_dst_AWID;
output  [7:0] m_axi_dst_AWLEN;
output  [2:0] m_axi_dst_AWSIZE;
output  [1:0] m_axi_dst_AWBURST;
output  [1:0] m_axi_dst_AWLOCK;
output  [3:0] m_axi_dst_AWCACHE;
output  [2:0] m_axi_dst_AWPROT;
output  [3:0] m_axi_dst_AWQOS;
output  [3:0] m_axi_dst_AWREGION;
output  [C_M_AXI_DST_AWUSER_WIDTH - 1:0] m_axi_dst_AWUSER;
output   m_axi_dst_WVALID;
input   m_axi_dst_WREADY;
output  [C_M_AXI_DST_DATA_WIDTH - 1:0] m_axi_dst_WDATA;
output  [C_M_AXI_DST_WSTRB_WIDTH - 1:0] m_axi_dst_WSTRB;
output   m_axi_dst_WLAST;
output  [C_M_AXI_DST_ID_WIDTH - 1:0] m_axi_dst_WID;
output  [C_M_AXI_DST_WUSER_WIDTH - 1:0] m_axi_dst_WUSER;
output   m_axi_dst_ARVALID;
input   m_axi_dst_ARREADY;
output  [C_M_AXI_DST_ADDR_WIDTH - 1:0] m_axi_dst_ARADDR;
output  [C_M_AXI_DST_ID_WIDTH - 1:0] m_axi_dst_ARID;
output  [7:0] m_axi_dst_ARLEN;
output  [2:0] m_axi_dst_ARSIZE;
output  [1:0] m_axi_dst_ARBURST;
output  [1:0] m_axi_dst_ARLOCK;
output  [3:0] m_axi_dst_ARCACHE;
output  [2:0] m_axi_dst_ARPROT;
output  [3:0] m_axi_dst_ARQOS;
output  [3:0] m_axi_dst_ARREGION;
output  [C_M_AXI_DST_ARUSER_WIDTH - 1:0] m_axi_dst_ARUSER;
input   m_axi_dst_RVALID;
output   m_axi_dst_RREADY;
input  [C_M_AXI_DST_DATA_WIDTH - 1:0] m_axi_dst_RDATA;
input   m_axi_dst_RLAST;
input  [C_M_AXI_DST_ID_WIDTH - 1:0] m_axi_dst_RID;
input  [C_M_AXI_DST_RUSER_WIDTH - 1:0] m_axi_dst_RUSER;
input  [1:0] m_axi_dst_RRESP;
input   m_axi_dst_BVALID;
output   m_axi_dst_BREADY;
input  [1:0] m_axi_dst_BRESP;
input  [C_M_AXI_DST_ID_WIDTH - 1:0] m_axi_dst_BID;
input  [C_M_AXI_DST_BUSER_WIDTH - 1:0] m_axi_dst_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [63:0] src_in;
wire   [63:0] dst_in;
wire   [63:0] dst_out;
wire   [7:0] alpha;
wire   [10:0] width;
wire   [10:0] height;
reg   [10:0] width_read_reg_146;
reg   [7:0] alpha_read_reg_152;
reg   [63:0] dst_out_read_reg_158;
reg   [63:0] dst_in_read_reg_163;
reg   [63:0] src_in_read_reg_168;
wire   [21:0] mul_ln22_fu_134_p2;
reg   [21:0] mul_ln22_reg_173;
wire   [7:0] c_alpha_fu_140_p2;
reg   [7:0] c_alpha_reg_178;
wire    ap_CS_fsm_state2;
wire    grp_bitblt_Pipeline_horiz_loop_fu_110_ap_start;
wire    grp_bitblt_Pipeline_horiz_loop_fu_110_ap_done;
wire    grp_bitblt_Pipeline_horiz_loop_fu_110_ap_idle;
wire    grp_bitblt_Pipeline_horiz_loop_fu_110_ap_ready;
wire    grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_AWVALID;
wire   [63:0] grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_AWADDR;
wire   [0:0] grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_AWID;
wire   [31:0] grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_AWLEN;
wire   [2:0] grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_AWSIZE;
wire   [1:0] grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_AWBURST;
wire   [1:0] grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_AWLOCK;
wire   [3:0] grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_AWCACHE;
wire   [2:0] grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_AWPROT;
wire   [3:0] grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_AWQOS;
wire   [3:0] grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_AWREGION;
wire   [0:0] grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_AWUSER;
wire    grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_WVALID;
wire   [31:0] grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_WDATA;
wire   [3:0] grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_WSTRB;
wire    grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_WLAST;
wire   [0:0] grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_WID;
wire   [0:0] grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_WUSER;
wire    grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_ARVALID;
wire   [63:0] grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_ARADDR;
wire   [0:0] grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_ARID;
wire   [31:0] grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_ARLEN;
wire   [2:0] grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_ARSIZE;
wire   [1:0] grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_ARBURST;
wire   [1:0] grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_ARLOCK;
wire   [3:0] grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_ARCACHE;
wire   [2:0] grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_ARPROT;
wire   [3:0] grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_ARQOS;
wire   [3:0] grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_ARREGION;
wire   [0:0] grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_ARUSER;
wire    grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_RREADY;
wire    grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_BREADY;
wire    grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_AWVALID;
wire   [63:0] grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_AWADDR;
wire   [0:0] grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_AWID;
wire   [31:0] grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_AWLEN;
wire   [2:0] grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_AWSIZE;
wire   [1:0] grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_AWBURST;
wire   [1:0] grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_AWLOCK;
wire   [3:0] grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_AWCACHE;
wire   [2:0] grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_AWPROT;
wire   [3:0] grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_AWQOS;
wire   [3:0] grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_AWREGION;
wire   [0:0] grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_AWUSER;
wire    grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_WVALID;
wire   [31:0] grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_WDATA;
wire   [3:0] grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_WSTRB;
wire    grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_WLAST;
wire   [0:0] grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_WID;
wire   [0:0] grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_WUSER;
wire    grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_ARVALID;
wire   [63:0] grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_ARADDR;
wire   [0:0] grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_ARID;
wire   [31:0] grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_ARLEN;
wire   [2:0] grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_ARSIZE;
wire   [1:0] grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_ARBURST;
wire   [1:0] grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_ARLOCK;
wire   [3:0] grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_ARCACHE;
wire   [2:0] grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_ARPROT;
wire   [3:0] grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_ARQOS;
wire   [3:0] grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_ARREGION;
wire   [0:0] grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_ARUSER;
wire    grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_RREADY;
wire    grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_BREADY;
reg    dst_AWVALID;
wire    dst_AWREADY;
reg    dst_WVALID;
wire    dst_WREADY;
reg    dst_ARVALID;
wire    dst_ARREADY;
wire    dst_RVALID;
reg    dst_RREADY;
wire   [31:0] dst_RDATA;
wire   [8:0] dst_RFIFONUM;
wire    dst_BVALID;
reg    dst_BREADY;
wire    src_AWREADY;
wire    src_WREADY;
reg    src_ARVALID;
wire    src_ARREADY;
wire    src_RVALID;
reg    src_RREADY;
wire   [31:0] src_RDATA;
wire   [9:0] src_RFIFONUM;
wire    src_BVALID;
reg    grp_bitblt_Pipeline_horiz_loop_fu_110_ap_start_reg;
wire    ap_CS_fsm_state3;
wire   [10:0] mul_ln22_fu_134_p0;
wire   [10:0] mul_ln22_fu_134_p1;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire   [21:0] mul_ln22_fu_134_p00;
wire   [21:0] mul_ln22_fu_134_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 grp_bitblt_Pipeline_horiz_loop_fu_110_ap_start_reg = 1'b0;
end

bitblt_bitblt_Pipeline_horiz_loop grp_bitblt_Pipeline_horiz_loop_fu_110(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_bitblt_Pipeline_horiz_loop_fu_110_ap_start),
    .ap_done(grp_bitblt_Pipeline_horiz_loop_fu_110_ap_done),
    .ap_idle(grp_bitblt_Pipeline_horiz_loop_fu_110_ap_idle),
    .ap_ready(grp_bitblt_Pipeline_horiz_loop_fu_110_ap_ready),
    .m_axi_src_AWVALID(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_AWVALID),
    .m_axi_src_AWREADY(1'b0),
    .m_axi_src_AWADDR(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_AWADDR),
    .m_axi_src_AWID(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_AWID),
    .m_axi_src_AWLEN(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_AWLEN),
    .m_axi_src_AWSIZE(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_AWSIZE),
    .m_axi_src_AWBURST(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_AWBURST),
    .m_axi_src_AWLOCK(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_AWLOCK),
    .m_axi_src_AWCACHE(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_AWCACHE),
    .m_axi_src_AWPROT(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_AWPROT),
    .m_axi_src_AWQOS(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_AWQOS),
    .m_axi_src_AWREGION(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_AWREGION),
    .m_axi_src_AWUSER(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_AWUSER),
    .m_axi_src_WVALID(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_WVALID),
    .m_axi_src_WREADY(1'b0),
    .m_axi_src_WDATA(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_WDATA),
    .m_axi_src_WSTRB(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_WSTRB),
    .m_axi_src_WLAST(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_WLAST),
    .m_axi_src_WID(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_WID),
    .m_axi_src_WUSER(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_WUSER),
    .m_axi_src_ARVALID(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_ARVALID),
    .m_axi_src_ARREADY(src_ARREADY),
    .m_axi_src_ARADDR(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_ARADDR),
    .m_axi_src_ARID(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_ARID),
    .m_axi_src_ARLEN(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_ARLEN),
    .m_axi_src_ARSIZE(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_ARSIZE),
    .m_axi_src_ARBURST(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_ARBURST),
    .m_axi_src_ARLOCK(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_ARLOCK),
    .m_axi_src_ARCACHE(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_ARCACHE),
    .m_axi_src_ARPROT(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_ARPROT),
    .m_axi_src_ARQOS(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_ARQOS),
    .m_axi_src_ARREGION(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_ARREGION),
    .m_axi_src_ARUSER(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_ARUSER),
    .m_axi_src_RVALID(src_RVALID),
    .m_axi_src_RREADY(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_RREADY),
    .m_axi_src_RDATA(src_RDATA),
    .m_axi_src_RLAST(1'b0),
    .m_axi_src_RID(1'd0),
    .m_axi_src_RFIFONUM(src_RFIFONUM),
    .m_axi_src_RUSER(1'd0),
    .m_axi_src_RRESP(2'd0),
    .m_axi_src_BVALID(1'b0),
    .m_axi_src_BREADY(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_BREADY),
    .m_axi_src_BRESP(2'd0),
    .m_axi_src_BID(1'd0),
    .m_axi_src_BUSER(1'd0),
    .m_axi_dst_AWVALID(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_AWVALID),
    .m_axi_dst_AWREADY(dst_AWREADY),
    .m_axi_dst_AWADDR(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_AWADDR),
    .m_axi_dst_AWID(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_AWID),
    .m_axi_dst_AWLEN(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_AWLEN),
    .m_axi_dst_AWSIZE(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_AWSIZE),
    .m_axi_dst_AWBURST(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_AWBURST),
    .m_axi_dst_AWLOCK(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_AWLOCK),
    .m_axi_dst_AWCACHE(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_AWCACHE),
    .m_axi_dst_AWPROT(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_AWPROT),
    .m_axi_dst_AWQOS(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_AWQOS),
    .m_axi_dst_AWREGION(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_AWREGION),
    .m_axi_dst_AWUSER(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_AWUSER),
    .m_axi_dst_WVALID(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_WVALID),
    .m_axi_dst_WREADY(dst_WREADY),
    .m_axi_dst_WDATA(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_WDATA),
    .m_axi_dst_WSTRB(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_WSTRB),
    .m_axi_dst_WLAST(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_WLAST),
    .m_axi_dst_WID(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_WID),
    .m_axi_dst_WUSER(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_WUSER),
    .m_axi_dst_ARVALID(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_ARVALID),
    .m_axi_dst_ARREADY(dst_ARREADY),
    .m_axi_dst_ARADDR(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_ARADDR),
    .m_axi_dst_ARID(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_ARID),
    .m_axi_dst_ARLEN(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_ARLEN),
    .m_axi_dst_ARSIZE(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_ARSIZE),
    .m_axi_dst_ARBURST(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_ARBURST),
    .m_axi_dst_ARLOCK(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_ARLOCK),
    .m_axi_dst_ARCACHE(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_ARCACHE),
    .m_axi_dst_ARPROT(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_ARPROT),
    .m_axi_dst_ARQOS(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_ARQOS),
    .m_axi_dst_ARREGION(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_ARREGION),
    .m_axi_dst_ARUSER(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_ARUSER),
    .m_axi_dst_RVALID(dst_RVALID),
    .m_axi_dst_RREADY(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_RREADY),
    .m_axi_dst_RDATA(dst_RDATA),
    .m_axi_dst_RLAST(1'b0),
    .m_axi_dst_RID(1'd0),
    .m_axi_dst_RFIFONUM(dst_RFIFONUM),
    .m_axi_dst_RUSER(1'd0),
    .m_axi_dst_RRESP(2'd0),
    .m_axi_dst_BVALID(dst_BVALID),
    .m_axi_dst_BREADY(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_BREADY),
    .m_axi_dst_BRESP(2'd0),
    .m_axi_dst_BID(1'd0),
    .m_axi_dst_BUSER(1'd0),
    .mul_ln22(mul_ln22_reg_173),
    .alpha_cast(alpha_read_reg_152),
    .zext_ln31_1(c_alpha_reg_178),
    .dst_out(dst_out_read_reg_158),
    .zext_ln31(width_read_reg_146),
    .width(width_read_reg_146),
    .src_in(src_in_read_reg_168),
    .dst_in(dst_in_read_reg_163)
);

bitblt_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .src_in(src_in),
    .dst_in(dst_in),
    .dst_out(dst_out),
    .alpha(alpha),
    .width(width),
    .height(height),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

bitblt_dst_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 5 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 32 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DST_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DST_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DST_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DST_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DST_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DST_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DST_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DST_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DST_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DST_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DST_CACHE_VALUE ),
    .USER_RFIFONUM_WIDTH( 9 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ))
dst_m_axi_U(
    .AWVALID(m_axi_dst_AWVALID),
    .AWREADY(m_axi_dst_AWREADY),
    .AWADDR(m_axi_dst_AWADDR),
    .AWID(m_axi_dst_AWID),
    .AWLEN(m_axi_dst_AWLEN),
    .AWSIZE(m_axi_dst_AWSIZE),
    .AWBURST(m_axi_dst_AWBURST),
    .AWLOCK(m_axi_dst_AWLOCK),
    .AWCACHE(m_axi_dst_AWCACHE),
    .AWPROT(m_axi_dst_AWPROT),
    .AWQOS(m_axi_dst_AWQOS),
    .AWREGION(m_axi_dst_AWREGION),
    .AWUSER(m_axi_dst_AWUSER),
    .WVALID(m_axi_dst_WVALID),
    .WREADY(m_axi_dst_WREADY),
    .WDATA(m_axi_dst_WDATA),
    .WSTRB(m_axi_dst_WSTRB),
    .WLAST(m_axi_dst_WLAST),
    .WID(m_axi_dst_WID),
    .WUSER(m_axi_dst_WUSER),
    .ARVALID(m_axi_dst_ARVALID),
    .ARREADY(m_axi_dst_ARREADY),
    .ARADDR(m_axi_dst_ARADDR),
    .ARID(m_axi_dst_ARID),
    .ARLEN(m_axi_dst_ARLEN),
    .ARSIZE(m_axi_dst_ARSIZE),
    .ARBURST(m_axi_dst_ARBURST),
    .ARLOCK(m_axi_dst_ARLOCK),
    .ARCACHE(m_axi_dst_ARCACHE),
    .ARPROT(m_axi_dst_ARPROT),
    .ARQOS(m_axi_dst_ARQOS),
    .ARREGION(m_axi_dst_ARREGION),
    .ARUSER(m_axi_dst_ARUSER),
    .RVALID(m_axi_dst_RVALID),
    .RREADY(m_axi_dst_RREADY),
    .RDATA(m_axi_dst_RDATA),
    .RLAST(m_axi_dst_RLAST),
    .RID(m_axi_dst_RID),
    .RUSER(m_axi_dst_RUSER),
    .RRESP(m_axi_dst_RRESP),
    .BVALID(m_axi_dst_BVALID),
    .BREADY(m_axi_dst_BREADY),
    .BRESP(m_axi_dst_BRESP),
    .BID(m_axi_dst_BID),
    .BUSER(m_axi_dst_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(dst_ARVALID),
    .I_ARREADY(dst_ARREADY),
    .I_ARADDR(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_ARADDR),
    .I_ARLEN(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_ARLEN),
    .I_RVALID(dst_RVALID),
    .I_RREADY(dst_RREADY),
    .I_RDATA(dst_RDATA),
    .I_RFIFONUM(dst_RFIFONUM),
    .I_AWVALID(dst_AWVALID),
    .I_AWREADY(dst_AWREADY),
    .I_AWADDR(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_AWADDR),
    .I_AWLEN(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_AWLEN),
    .I_WVALID(dst_WVALID),
    .I_WREADY(dst_WREADY),
    .I_WDATA(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_WDATA),
    .I_WSTRB(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_WSTRB),
    .I_BVALID(dst_BVALID),
    .I_BREADY(dst_BREADY)
);

bitblt_src_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 5 ),
    .MAX_READ_BURST_LENGTH( 32 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_SRC_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_SRC_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_SRC_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_SRC_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_SRC_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_SRC_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_SRC_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_SRC_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_SRC_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_SRC_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_SRC_CACHE_VALUE ),
    .USER_RFIFONUM_WIDTH( 10 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ))
src_m_axi_U(
    .AWVALID(m_axi_src_AWVALID),
    .AWREADY(m_axi_src_AWREADY),
    .AWADDR(m_axi_src_AWADDR),
    .AWID(m_axi_src_AWID),
    .AWLEN(m_axi_src_AWLEN),
    .AWSIZE(m_axi_src_AWSIZE),
    .AWBURST(m_axi_src_AWBURST),
    .AWLOCK(m_axi_src_AWLOCK),
    .AWCACHE(m_axi_src_AWCACHE),
    .AWPROT(m_axi_src_AWPROT),
    .AWQOS(m_axi_src_AWQOS),
    .AWREGION(m_axi_src_AWREGION),
    .AWUSER(m_axi_src_AWUSER),
    .WVALID(m_axi_src_WVALID),
    .WREADY(m_axi_src_WREADY),
    .WDATA(m_axi_src_WDATA),
    .WSTRB(m_axi_src_WSTRB),
    .WLAST(m_axi_src_WLAST),
    .WID(m_axi_src_WID),
    .WUSER(m_axi_src_WUSER),
    .ARVALID(m_axi_src_ARVALID),
    .ARREADY(m_axi_src_ARREADY),
    .ARADDR(m_axi_src_ARADDR),
    .ARID(m_axi_src_ARID),
    .ARLEN(m_axi_src_ARLEN),
    .ARSIZE(m_axi_src_ARSIZE),
    .ARBURST(m_axi_src_ARBURST),
    .ARLOCK(m_axi_src_ARLOCK),
    .ARCACHE(m_axi_src_ARCACHE),
    .ARPROT(m_axi_src_ARPROT),
    .ARQOS(m_axi_src_ARQOS),
    .ARREGION(m_axi_src_ARREGION),
    .ARUSER(m_axi_src_ARUSER),
    .RVALID(m_axi_src_RVALID),
    .RREADY(m_axi_src_RREADY),
    .RDATA(m_axi_src_RDATA),
    .RLAST(m_axi_src_RLAST),
    .RID(m_axi_src_RID),
    .RUSER(m_axi_src_RUSER),
    .RRESP(m_axi_src_RRESP),
    .BVALID(m_axi_src_BVALID),
    .BREADY(m_axi_src_BREADY),
    .BRESP(m_axi_src_BRESP),
    .BID(m_axi_src_BID),
    .BUSER(m_axi_src_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(src_ARVALID),
    .I_ARREADY(src_ARREADY),
    .I_ARADDR(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_ARADDR),
    .I_ARLEN(grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_ARLEN),
    .I_RVALID(src_RVALID),
    .I_RREADY(src_RREADY),
    .I_RDATA(src_RDATA),
    .I_RFIFONUM(src_RFIFONUM),
    .I_AWVALID(1'b0),
    .I_AWREADY(src_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWLEN(32'd0),
    .I_WVALID(1'b0),
    .I_WREADY(src_WREADY),
    .I_WDATA(32'd0),
    .I_WSTRB(4'd0),
    .I_BVALID(src_BVALID),
    .I_BREADY(1'b0)
);

bitblt_mul_11ns_11ns_22_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 22 ))
mul_11ns_11ns_22_1_1_U23(
    .din0(mul_ln22_fu_134_p0),
    .din1(mul_ln22_fu_134_p1),
    .dout(mul_ln22_fu_134_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_bitblt_Pipeline_horiz_loop_fu_110_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_bitblt_Pipeline_horiz_loop_fu_110_ap_start_reg <= 1'b1;
        end else if ((grp_bitblt_Pipeline_horiz_loop_fu_110_ap_ready == 1'b1)) begin
            grp_bitblt_Pipeline_horiz_loop_fu_110_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        alpha_read_reg_152 <= alpha;
        dst_in_read_reg_163 <= dst_in;
        dst_out_read_reg_158 <= dst_out;
        mul_ln22_reg_173 <= mul_ln22_fu_134_p2;
        src_in_read_reg_168 <= src_in;
        width_read_reg_146 <= width;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        c_alpha_reg_178 <= c_alpha_fu_140_p2;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_bitblt_Pipeline_horiz_loop_fu_110_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (grp_bitblt_Pipeline_horiz_loop_fu_110_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (grp_bitblt_Pipeline_horiz_loop_fu_110_ap_done == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        dst_ARVALID = grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_ARVALID;
    end else begin
        dst_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        dst_AWVALID = grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_AWVALID;
    end else begin
        dst_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        dst_BREADY = grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_BREADY;
    end else begin
        dst_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        dst_RREADY = grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_RREADY;
    end else begin
        dst_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        dst_WVALID = grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_dst_WVALID;
    end else begin
        dst_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        src_ARVALID = grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_ARVALID;
    end else begin
        src_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        src_RREADY = grp_bitblt_Pipeline_horiz_loop_fu_110_m_axi_src_RREADY;
    end else begin
        src_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (grp_bitblt_Pipeline_horiz_loop_fu_110_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign c_alpha_fu_140_p2 = (8'd255 ^ alpha_read_reg_152);

assign grp_bitblt_Pipeline_horiz_loop_fu_110_ap_start = grp_bitblt_Pipeline_horiz_loop_fu_110_ap_start_reg;

assign mul_ln22_fu_134_p0 = mul_ln22_fu_134_p00;

assign mul_ln22_fu_134_p00 = height;

assign mul_ln22_fu_134_p1 = mul_ln22_fu_134_p10;

assign mul_ln22_fu_134_p10 = width;

endmodule //bitblt
