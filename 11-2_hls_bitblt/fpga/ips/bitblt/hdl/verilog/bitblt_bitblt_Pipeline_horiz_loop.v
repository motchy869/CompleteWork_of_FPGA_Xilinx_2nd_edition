// ==============================================================
// Generated by Vitis HLS v2023.1.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module bitblt_bitblt_Pipeline_horiz_loop (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_src_AWVALID,
        m_axi_src_AWREADY,
        m_axi_src_AWADDR,
        m_axi_src_AWID,
        m_axi_src_AWLEN,
        m_axi_src_AWSIZE,
        m_axi_src_AWBURST,
        m_axi_src_AWLOCK,
        m_axi_src_AWCACHE,
        m_axi_src_AWPROT,
        m_axi_src_AWQOS,
        m_axi_src_AWREGION,
        m_axi_src_AWUSER,
        m_axi_src_WVALID,
        m_axi_src_WREADY,
        m_axi_src_WDATA,
        m_axi_src_WSTRB,
        m_axi_src_WLAST,
        m_axi_src_WID,
        m_axi_src_WUSER,
        m_axi_src_ARVALID,
        m_axi_src_ARREADY,
        m_axi_src_ARADDR,
        m_axi_src_ARID,
        m_axi_src_ARLEN,
        m_axi_src_ARSIZE,
        m_axi_src_ARBURST,
        m_axi_src_ARLOCK,
        m_axi_src_ARCACHE,
        m_axi_src_ARPROT,
        m_axi_src_ARQOS,
        m_axi_src_ARREGION,
        m_axi_src_ARUSER,
        m_axi_src_RVALID,
        m_axi_src_RREADY,
        m_axi_src_RDATA,
        m_axi_src_RLAST,
        m_axi_src_RID,
        m_axi_src_RFIFONUM,
        m_axi_src_RUSER,
        m_axi_src_RRESP,
        m_axi_src_BVALID,
        m_axi_src_BREADY,
        m_axi_src_BRESP,
        m_axi_src_BID,
        m_axi_src_BUSER,
        m_axi_dst_AWVALID,
        m_axi_dst_AWREADY,
        m_axi_dst_AWADDR,
        m_axi_dst_AWID,
        m_axi_dst_AWLEN,
        m_axi_dst_AWSIZE,
        m_axi_dst_AWBURST,
        m_axi_dst_AWLOCK,
        m_axi_dst_AWCACHE,
        m_axi_dst_AWPROT,
        m_axi_dst_AWQOS,
        m_axi_dst_AWREGION,
        m_axi_dst_AWUSER,
        m_axi_dst_WVALID,
        m_axi_dst_WREADY,
        m_axi_dst_WDATA,
        m_axi_dst_WSTRB,
        m_axi_dst_WLAST,
        m_axi_dst_WID,
        m_axi_dst_WUSER,
        m_axi_dst_ARVALID,
        m_axi_dst_ARREADY,
        m_axi_dst_ARADDR,
        m_axi_dst_ARID,
        m_axi_dst_ARLEN,
        m_axi_dst_ARSIZE,
        m_axi_dst_ARBURST,
        m_axi_dst_ARLOCK,
        m_axi_dst_ARCACHE,
        m_axi_dst_ARPROT,
        m_axi_dst_ARQOS,
        m_axi_dst_ARREGION,
        m_axi_dst_ARUSER,
        m_axi_dst_RVALID,
        m_axi_dst_RREADY,
        m_axi_dst_RDATA,
        m_axi_dst_RLAST,
        m_axi_dst_RID,
        m_axi_dst_RFIFONUM,
        m_axi_dst_RUSER,
        m_axi_dst_RRESP,
        m_axi_dst_BVALID,
        m_axi_dst_BREADY,
        m_axi_dst_BRESP,
        m_axi_dst_BID,
        m_axi_dst_BUSER,
        mul_ln22,
        alpha_cast,
        zext_ln31_1,
        dst_out,
        zext_ln31,
        width,
        src_in,
        dst_in
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_src_AWVALID;
input   m_axi_src_AWREADY;
output  [63:0] m_axi_src_AWADDR;
output  [0:0] m_axi_src_AWID;
output  [31:0] m_axi_src_AWLEN;
output  [2:0] m_axi_src_AWSIZE;
output  [1:0] m_axi_src_AWBURST;
output  [1:0] m_axi_src_AWLOCK;
output  [3:0] m_axi_src_AWCACHE;
output  [2:0] m_axi_src_AWPROT;
output  [3:0] m_axi_src_AWQOS;
output  [3:0] m_axi_src_AWREGION;
output  [0:0] m_axi_src_AWUSER;
output   m_axi_src_WVALID;
input   m_axi_src_WREADY;
output  [31:0] m_axi_src_WDATA;
output  [3:0] m_axi_src_WSTRB;
output   m_axi_src_WLAST;
output  [0:0] m_axi_src_WID;
output  [0:0] m_axi_src_WUSER;
output   m_axi_src_ARVALID;
input   m_axi_src_ARREADY;
output  [63:0] m_axi_src_ARADDR;
output  [0:0] m_axi_src_ARID;
output  [31:0] m_axi_src_ARLEN;
output  [2:0] m_axi_src_ARSIZE;
output  [1:0] m_axi_src_ARBURST;
output  [1:0] m_axi_src_ARLOCK;
output  [3:0] m_axi_src_ARCACHE;
output  [2:0] m_axi_src_ARPROT;
output  [3:0] m_axi_src_ARQOS;
output  [3:0] m_axi_src_ARREGION;
output  [0:0] m_axi_src_ARUSER;
input   m_axi_src_RVALID;
output   m_axi_src_RREADY;
input  [31:0] m_axi_src_RDATA;
input   m_axi_src_RLAST;
input  [0:0] m_axi_src_RID;
input  [9:0] m_axi_src_RFIFONUM;
input  [0:0] m_axi_src_RUSER;
input  [1:0] m_axi_src_RRESP;
input   m_axi_src_BVALID;
output   m_axi_src_BREADY;
input  [1:0] m_axi_src_BRESP;
input  [0:0] m_axi_src_BID;
input  [0:0] m_axi_src_BUSER;
output   m_axi_dst_AWVALID;
input   m_axi_dst_AWREADY;
output  [63:0] m_axi_dst_AWADDR;
output  [0:0] m_axi_dst_AWID;
output  [31:0] m_axi_dst_AWLEN;
output  [2:0] m_axi_dst_AWSIZE;
output  [1:0] m_axi_dst_AWBURST;
output  [1:0] m_axi_dst_AWLOCK;
output  [3:0] m_axi_dst_AWCACHE;
output  [2:0] m_axi_dst_AWPROT;
output  [3:0] m_axi_dst_AWQOS;
output  [3:0] m_axi_dst_AWREGION;
output  [0:0] m_axi_dst_AWUSER;
output   m_axi_dst_WVALID;
input   m_axi_dst_WREADY;
output  [31:0] m_axi_dst_WDATA;
output  [3:0] m_axi_dst_WSTRB;
output   m_axi_dst_WLAST;
output  [0:0] m_axi_dst_WID;
output  [0:0] m_axi_dst_WUSER;
output   m_axi_dst_ARVALID;
input   m_axi_dst_ARREADY;
output  [63:0] m_axi_dst_ARADDR;
output  [0:0] m_axi_dst_ARID;
output  [31:0] m_axi_dst_ARLEN;
output  [2:0] m_axi_dst_ARSIZE;
output  [1:0] m_axi_dst_ARBURST;
output  [1:0] m_axi_dst_ARLOCK;
output  [3:0] m_axi_dst_ARCACHE;
output  [2:0] m_axi_dst_ARPROT;
output  [3:0] m_axi_dst_ARQOS;
output  [3:0] m_axi_dst_ARREGION;
output  [0:0] m_axi_dst_ARUSER;
input   m_axi_dst_RVALID;
output   m_axi_dst_RREADY;
input  [31:0] m_axi_dst_RDATA;
input   m_axi_dst_RLAST;
input  [0:0] m_axi_dst_RID;
input  [8:0] m_axi_dst_RFIFONUM;
input  [0:0] m_axi_dst_RUSER;
input  [1:0] m_axi_dst_RRESP;
input   m_axi_dst_BVALID;
output   m_axi_dst_BREADY;
input  [1:0] m_axi_dst_BRESP;
input  [0:0] m_axi_dst_BID;
input  [0:0] m_axi_dst_BUSER;
input  [21:0] mul_ln22;
input  [7:0] alpha_cast;
input  [7:0] zext_ln31_1;
input  [63:0] dst_out;
input  [10:0] zext_ln31;
input  [10:0] width;
input  [63:0] src_in;
input  [63:0] dst_in;

reg ap_idle;
reg m_axi_src_ARVALID;
reg m_axi_src_RREADY;
reg m_axi_dst_AWVALID;
reg m_axi_dst_WVALID;
reg m_axi_dst_ARVALID;
reg m_axi_dst_RREADY;
reg m_axi_dst_BREADY;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
reg   [0:0] or_ln30_reg_813;
reg   [0:0] or_ln30_reg_813_pp0_iter2_reg;
reg    ap_block_state4_io;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
reg   [0:0] icmp_ln30_reg_803;
reg   [0:0] icmp_ln30_reg_803_pp0_iter10_reg;
reg    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
reg   [0:0] icmp_ln30_reg_803_pp0_iter12_reg;
reg    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_state15_pp0_stage0_iter14;
wire    ap_block_state16_pp0_stage0_iter15;
wire    ap_block_state17_pp0_stage0_iter16;
reg   [0:0] icmp_ln30_reg_803_pp0_iter15_reg;
reg    ap_block_state17_io;
wire    ap_block_state18_pp0_stage0_iter17;
reg   [0:0] icmp_ln30_reg_803_pp0_iter16_reg;
reg    ap_block_state18_io;
wire    ap_block_state19_pp0_stage0_iter18;
wire    ap_block_state20_pp0_stage0_iter19;
wire    ap_block_state21_pp0_stage0_iter20;
wire    ap_block_state22_pp0_stage0_iter21;
reg   [0:0] icmp_ln30_reg_803_pp0_iter21_reg;
reg    ap_block_state23_pp0_stage0_iter22;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln30_fu_275_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    dst_blk_n_R;
wire    ap_block_pp0_stage0;
reg    dst_blk_n_AW;
reg    dst_blk_n_W;
reg    dst_blk_n_B;
reg    dst_blk_n_AR;
reg    src_blk_n_R;
reg    src_blk_n_AR;
reg   [0:0] first_iter_0_reg_230;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] zext_ln31_cast_fu_242_p1;
reg   [31:0] zext_ln31_cast_reg_777;
wire   [15:0] zext_ln31_1_cast_fu_246_p1;
reg   [15:0] zext_ln31_1_cast_reg_783;
wire   [15:0] alpha_cast_cast_fu_250_p1;
reg   [15:0] alpha_cast_cast_reg_790;
reg   [10:0] y_1_reg_797;
reg   [0:0] icmp_ln30_reg_803_pp0_iter2_reg;
reg   [0:0] icmp_ln30_reg_803_pp0_iter3_reg;
reg   [0:0] icmp_ln30_reg_803_pp0_iter4_reg;
reg   [0:0] icmp_ln30_reg_803_pp0_iter5_reg;
reg   [0:0] icmp_ln30_reg_803_pp0_iter6_reg;
reg   [0:0] icmp_ln30_reg_803_pp0_iter7_reg;
reg   [0:0] icmp_ln30_reg_803_pp0_iter8_reg;
reg   [0:0] icmp_ln30_reg_803_pp0_iter9_reg;
reg   [0:0] icmp_ln30_reg_803_pp0_iter11_reg;
reg   [0:0] icmp_ln30_reg_803_pp0_iter13_reg;
reg   [0:0] icmp_ln30_reg_803_pp0_iter14_reg;
reg   [0:0] icmp_ln30_reg_803_pp0_iter17_reg;
reg   [0:0] icmp_ln30_reg_803_pp0_iter18_reg;
reg   [0:0] icmp_ln30_reg_803_pp0_iter19_reg;
reg   [0:0] icmp_ln30_reg_803_pp0_iter20_reg;
wire   [0:0] icmp_ln31_fu_289_p2;
reg   [0:0] icmp_ln31_reg_807;
wire   [0:0] or_ln30_fu_294_p2;
wire   [10:0] select_ln30_fu_300_p3;
reg   [10:0] select_ln30_reg_817;
reg   [10:0] select_ln30_reg_817_pp0_iter2_reg;
reg   [10:0] select_ln30_reg_817_pp0_iter3_reg;
reg   [10:0] select_ln30_reg_817_pp0_iter4_reg;
reg   [10:0] select_ln30_reg_817_pp0_iter5_reg;
reg   [10:0] select_ln30_reg_817_pp0_iter6_reg;
reg   [10:0] select_ln30_reg_817_pp0_iter7_reg;
reg   [10:0] select_ln30_reg_817_pp0_iter8_reg;
reg   [10:0] select_ln30_reg_817_pp0_iter9_reg;
reg   [10:0] select_ln30_reg_817_pp0_iter10_reg;
reg   [10:0] select_ln30_reg_817_pp0_iter11_reg;
reg   [10:0] select_ln30_reg_817_pp0_iter12_reg;
reg   [10:0] select_ln30_reg_817_pp0_iter13_reg;
wire   [10:0] add_ln30_3_fu_308_p2;
reg   [10:0] add_ln30_3_reg_822;
wire   [10:0] select_ln30_1_fu_314_p3;
reg   [10:0] select_ln30_1_reg_828;
reg   [10:0] select_ln30_1_reg_828_pp0_iter2_reg;
reg   [10:0] select_ln30_1_reg_828_pp0_iter3_reg;
reg   [10:0] select_ln30_1_reg_828_pp0_iter4_reg;
reg   [10:0] select_ln30_1_reg_828_pp0_iter5_reg;
reg   [10:0] select_ln30_1_reg_828_pp0_iter6_reg;
reg   [10:0] select_ln30_1_reg_828_pp0_iter7_reg;
reg   [10:0] select_ln30_1_reg_828_pp0_iter8_reg;
reg   [10:0] select_ln30_1_reg_828_pp0_iter9_reg;
reg   [10:0] select_ln30_1_reg_828_pp0_iter10_reg;
reg   [10:0] select_ln30_1_reg_828_pp0_iter11_reg;
reg   [10:0] select_ln30_1_reg_828_pp0_iter12_reg;
reg   [10:0] select_ln30_1_reg_828_pp0_iter13_reg;
wire   [19:0] select_ln30_2_fu_378_p3;
reg   [19:0] select_ln30_2_reg_833;
reg   [19:0] select_ln30_2_reg_833_pp0_iter3_reg;
reg   [19:0] select_ln30_2_reg_833_pp0_iter4_reg;
reg   [19:0] select_ln30_2_reg_833_pp0_iter5_reg;
reg   [19:0] select_ln30_2_reg_833_pp0_iter6_reg;
reg   [19:0] select_ln30_2_reg_833_pp0_iter7_reg;
reg   [19:0] select_ln30_2_reg_833_pp0_iter8_reg;
reg   [19:0] select_ln30_2_reg_833_pp0_iter9_reg;
reg   [19:0] select_ln30_2_reg_833_pp0_iter10_reg;
reg   [19:0] select_ln30_2_reg_833_pp0_iter11_reg;
reg   [19:0] select_ln30_2_reg_833_pp0_iter12_reg;
reg   [19:0] select_ln30_2_reg_833_pp0_iter13_reg;
reg   [61:0] sext_ln31_mid2_v_reg_838;
reg   [61:0] sext_ln31_1_mid2_v_reg_843;
wire   [7:0] src_b_fu_479_p1;
reg   [7:0] src_b_reg_868;
reg   [7:0] src_r_reg_873;
reg   [7:0] src_g_reg_878;
wire   [7:0] dst_b_fu_512_p1;
reg   [7:0] dst_b_reg_898;
reg   [7:0] dst_r_reg_903;
reg   [7:0] dst_g_reg_908;
wire   [20:0] add_ln33_1_fu_599_p2;
reg   [20:0] add_ln33_1_reg_928;
wire   [16:0] grp_fu_710_p3;
reg   [16:0] add_ln14_reg_933;
wire   [16:0] grp_fu_717_p3;
reg   [16:0] add_ln15_reg_938;
wire   [16:0] grp_fu_724_p3;
reg   [16:0] add_ln16_reg_943;
reg   [63:0] dst_addr_1_reg_948;
reg   [7:0] dst_r_1_reg_954;
reg   [7:0] dst_b_1_reg_959;
reg   [7:0] tmp_1_reg_964;
reg    ap_condition_exit_pp0_iter2_stage0;
reg   [0:0] ap_phi_mux_first_iter_0_phi_fu_234_p4;
wire    ap_loop_init;
wire  signed [63:0] sext_ln30_fu_447_p1;
wire  signed [63:0] sext_ln30_1_fu_450_p1;
wire  signed [63:0] sext_ln33_fu_631_p1;
reg    ap_block_pp0_stage0_01001;
reg   [10:0] x_fu_132;
wire   [10:0] x_1_fu_322_p2;
reg   [10:0] y_fu_136;
reg   [21:0] indvar_flatten_fu_140;
wire   [21:0] add_ln30_2_fu_280_p2;
wire   [21:0] p_shl_fu_350_p3;
wire   [19:0] tmp_fu_343_p3;
wire   [22:0] p_shl_cast_fu_357_p1;
wire   [22:0] p_shl1_cast_fu_361_p1;
wire   [19:0] p_mid_fu_371_p3;
wire   [21:0] p_shl_mid1_fu_385_p3;
wire   [22:0] p_shl_cast_mid1_fu_392_p1;
wire   [22:0] p_shl1_cast_mid1_fu_396_p1;
wire   [22:0] p_mid112_fu_400_p2;
wire   [22:0] empty_fu_365_p2;
wire   [22:0] select_ln30_3_fu_406_p3;
wire   [63:0] zext_ln30_2_fu_413_p1;
wire   [63:0] add_ln30_fu_417_p2;
wire   [63:0] add_ln30_1_fu_432_p2;
wire   [17:0] p_cast_mid2_v_fu_536_p3;
wire   [7:0] mul_ln14_1_fu_556_p0;
wire   [7:0] mul_ln14_1_fu_556_p1;
wire   [15:0] mul_ln14_1_fu_556_p2;
wire   [7:0] mul_ln15_1_fu_568_p0;
wire   [7:0] mul_ln15_1_fu_568_p1;
wire   [15:0] mul_ln15_1_fu_568_p2;
wire   [7:0] mul_ln16_1_fu_580_p0;
wire   [7:0] mul_ln16_1_fu_580_p1;
wire   [15:0] mul_ln16_1_fu_580_p2;
wire   [18:0] zext_ln30_fu_543_p1;
wire   [18:0] zext_ln33_fu_550_p1;
wire   [18:0] add_ln33_2_fu_589_p2;
wire   [20:0] zext_ln33_2_fu_595_p1;
wire   [20:0] zext_ln30_1_fu_547_p1;
wire   [22:0] shl_ln_fu_605_p3;
wire   [63:0] zext_ln33_3_fu_612_p1;
wire   [63:0] add_ln33_fu_616_p2;
wire   [61:0] trunc_ln_fu_621_p4;
wire   [16:0] mul_ln14_2_fu_644_p0;
wire   [18:0] mul_ln14_2_fu_644_p1;
wire   [34:0] mul_ln14_2_fu_644_p2;
wire   [16:0] mul_ln15_2_fu_663_p0;
wire   [18:0] mul_ln15_2_fu_663_p1;
wire   [16:0] mul_ln16_2_fu_672_p0;
wire   [18:0] mul_ln16_2_fu_672_p1;
wire   [34:0] mul_ln16_2_fu_672_p2;
wire   [34:0] mul_ln15_2_fu_663_p2;
wire   [23:0] or_ln18_1_fu_698_p4;
wire   [7:0] grp_fu_710_p0;
wire   [7:0] grp_fu_710_p1;
wire   [15:0] grp_fu_710_p2;
wire   [7:0] grp_fu_717_p0;
wire   [7:0] grp_fu_717_p1;
wire   [15:0] grp_fu_717_p2;
wire   [7:0] grp_fu_724_p0;
wire   [7:0] grp_fu_724_p1;
wire   [15:0] grp_fu_724_p2;
reg    grp_fu_710_ce;
reg    grp_fu_717_ce;
reg    grp_fu_724_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg    ap_loop_exit_ready_pp0_iter16_reg;
reg    ap_loop_exit_ready_pp0_iter17_reg;
reg    ap_loop_exit_ready_pp0_iter18_reg;
reg    ap_loop_exit_ready_pp0_iter19_reg;
reg    ap_loop_exit_ready_pp0_iter20_reg;
reg    ap_loop_exit_ready_pp0_iter21_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [15:0] grp_fu_710_p00;
wire   [16:0] grp_fu_710_p20;
wire   [15:0] grp_fu_717_p00;
wire   [16:0] grp_fu_717_p20;
wire   [15:0] grp_fu_724_p00;
wire   [16:0] grp_fu_724_p20;
wire   [15:0] mul_ln14_1_fu_556_p00;
wire   [34:0] mul_ln14_2_fu_644_p00;
wire   [15:0] mul_ln15_1_fu_568_p00;
wire   [34:0] mul_ln15_2_fu_663_p00;
wire   [15:0] mul_ln16_1_fu_580_p00;
wire   [34:0] mul_ln16_2_fu_672_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_done_reg = 1'b0;
end

bitblt_mul_8ns_8ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8ns_8ns_16_1_1_U1(
    .din0(mul_ln14_1_fu_556_p0),
    .din1(mul_ln14_1_fu_556_p1),
    .dout(mul_ln14_1_fu_556_p2)
);

bitblt_mul_8ns_8ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8ns_8ns_16_1_1_U2(
    .din0(mul_ln15_1_fu_568_p0),
    .din1(mul_ln15_1_fu_568_p1),
    .dout(mul_ln15_1_fu_568_p2)
);

bitblt_mul_8ns_8ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8ns_8ns_16_1_1_U3(
    .din0(mul_ln16_1_fu_580_p0),
    .din1(mul_ln16_1_fu_580_p1),
    .dout(mul_ln16_1_fu_580_p2)
);

bitblt_mul_17ns_19ns_35_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 35 ))
mul_17ns_19ns_35_1_1_U4(
    .din0(mul_ln14_2_fu_644_p0),
    .din1(mul_ln14_2_fu_644_p1),
    .dout(mul_ln14_2_fu_644_p2)
);

bitblt_mul_17ns_19ns_35_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 35 ))
mul_17ns_19ns_35_1_1_U5(
    .din0(mul_ln15_2_fu_663_p0),
    .din1(mul_ln15_2_fu_663_p1),
    .dout(mul_ln15_2_fu_663_p2)
);

bitblt_mul_17ns_19ns_35_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 35 ))
mul_17ns_19ns_35_1_1_U6(
    .din0(mul_ln16_2_fu_672_p0),
    .din1(mul_ln16_2_fu_672_p1),
    .dout(mul_ln16_2_fu_672_p2)
);

bitblt_mac_muladd_8ns_8ns_16ns_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8ns_8ns_16ns_17_4_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_710_p0),
    .din1(grp_fu_710_p1),
    .din2(grp_fu_710_p2),
    .ce(grp_fu_710_ce),
    .dout(grp_fu_710_p3)
);

bitblt_mac_muladd_8ns_8ns_16ns_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8ns_8ns_16ns_17_4_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_717_p0),
    .din1(grp_fu_717_p1),
    .din2(grp_fu_717_p2),
    .ce(grp_fu_717_ce),
    .dout(grp_fu_717_p3)
);

bitblt_mac_muladd_8ns_8ns_16ns_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8ns_8ns_16ns_17_4_1_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_724_p0),
    .din1(grp_fu_724_p1),
    .din2(grp_fu_724_p2),
    .ce(grp_fu_724_ce),
    .dout(grp_fu_724_p3)
);

bitblt_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter21_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter2_stage0)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln30_reg_803 == 1'd0))) begin
        first_iter_0_reg_230 <= 1'd0;
    end else if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        first_iter_0_reg_230 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_140 <= 22'd0;
        end else if (((icmp_ln30_fu_275_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten_fu_140 <= add_ln30_2_fu_280_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            x_fu_132 <= 11'd0;
        end else if (((icmp_ln30_fu_275_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            x_fu_132 <= x_1_fu_322_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            y_fu_136 <= 11'd0;
        end else if (((icmp_ln30_fu_275_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            y_fu_136 <= select_ln30_1_fu_314_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter15 == 1'b1) & (icmp_ln30_reg_803_pp0_iter14_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln14_reg_933 <= grp_fu_710_p3;
        add_ln15_reg_938 <= grp_fu_717_p3;
        add_ln16_reg_943 <= grp_fu_724_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln30_fu_275_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln30_3_reg_822 <= add_ln30_3_fu_308_p2;
        icmp_ln31_reg_807 <= icmp_ln31_fu_289_p2;
        or_ln30_reg_813 <= or_ln30_fu_294_p2;
        select_ln30_1_reg_828 <= select_ln30_1_fu_314_p3;
        select_ln30_reg_817 <= select_ln30_fu_300_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln30_reg_803_pp0_iter13_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln33_1_reg_928 <= add_ln33_1_fu_599_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        alpha_cast_cast_reg_790[7 : 0] <= alpha_cast_cast_fu_250_p1[7 : 0];
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        icmp_ln30_reg_803 <= icmp_ln30_fu_275_p2;
        y_1_reg_797 <= y_fu_136;
        zext_ln31_1_cast_reg_783[7 : 0] <= zext_ln31_1_cast_fu_246_p1[7 : 0];
        zext_ln31_cast_reg_777[10 : 0] <= zext_ln31_cast_fu_242_p1[10 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
        ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
        ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
        ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
        ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
        ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        icmp_ln30_reg_803_pp0_iter10_reg <= icmp_ln30_reg_803_pp0_iter9_reg;
        icmp_ln30_reg_803_pp0_iter11_reg <= icmp_ln30_reg_803_pp0_iter10_reg;
        icmp_ln30_reg_803_pp0_iter12_reg <= icmp_ln30_reg_803_pp0_iter11_reg;
        icmp_ln30_reg_803_pp0_iter13_reg <= icmp_ln30_reg_803_pp0_iter12_reg;
        icmp_ln30_reg_803_pp0_iter14_reg <= icmp_ln30_reg_803_pp0_iter13_reg;
        icmp_ln30_reg_803_pp0_iter15_reg <= icmp_ln30_reg_803_pp0_iter14_reg;
        icmp_ln30_reg_803_pp0_iter16_reg <= icmp_ln30_reg_803_pp0_iter15_reg;
        icmp_ln30_reg_803_pp0_iter17_reg <= icmp_ln30_reg_803_pp0_iter16_reg;
        icmp_ln30_reg_803_pp0_iter18_reg <= icmp_ln30_reg_803_pp0_iter17_reg;
        icmp_ln30_reg_803_pp0_iter19_reg <= icmp_ln30_reg_803_pp0_iter18_reg;
        icmp_ln30_reg_803_pp0_iter20_reg <= icmp_ln30_reg_803_pp0_iter19_reg;
        icmp_ln30_reg_803_pp0_iter21_reg <= icmp_ln30_reg_803_pp0_iter20_reg;
        icmp_ln30_reg_803_pp0_iter2_reg <= icmp_ln30_reg_803;
        icmp_ln30_reg_803_pp0_iter3_reg <= icmp_ln30_reg_803_pp0_iter2_reg;
        icmp_ln30_reg_803_pp0_iter4_reg <= icmp_ln30_reg_803_pp0_iter3_reg;
        icmp_ln30_reg_803_pp0_iter5_reg <= icmp_ln30_reg_803_pp0_iter4_reg;
        icmp_ln30_reg_803_pp0_iter6_reg <= icmp_ln30_reg_803_pp0_iter5_reg;
        icmp_ln30_reg_803_pp0_iter7_reg <= icmp_ln30_reg_803_pp0_iter6_reg;
        icmp_ln30_reg_803_pp0_iter8_reg <= icmp_ln30_reg_803_pp0_iter7_reg;
        icmp_ln30_reg_803_pp0_iter9_reg <= icmp_ln30_reg_803_pp0_iter8_reg;
        or_ln30_reg_813_pp0_iter2_reg <= or_ln30_reg_813;
        select_ln30_1_reg_828_pp0_iter10_reg <= select_ln30_1_reg_828_pp0_iter9_reg;
        select_ln30_1_reg_828_pp0_iter11_reg <= select_ln30_1_reg_828_pp0_iter10_reg;
        select_ln30_1_reg_828_pp0_iter12_reg <= select_ln30_1_reg_828_pp0_iter11_reg;
        select_ln30_1_reg_828_pp0_iter13_reg <= select_ln30_1_reg_828_pp0_iter12_reg;
        select_ln30_1_reg_828_pp0_iter2_reg <= select_ln30_1_reg_828;
        select_ln30_1_reg_828_pp0_iter3_reg <= select_ln30_1_reg_828_pp0_iter2_reg;
        select_ln30_1_reg_828_pp0_iter4_reg <= select_ln30_1_reg_828_pp0_iter3_reg;
        select_ln30_1_reg_828_pp0_iter5_reg <= select_ln30_1_reg_828_pp0_iter4_reg;
        select_ln30_1_reg_828_pp0_iter6_reg <= select_ln30_1_reg_828_pp0_iter5_reg;
        select_ln30_1_reg_828_pp0_iter7_reg <= select_ln30_1_reg_828_pp0_iter6_reg;
        select_ln30_1_reg_828_pp0_iter8_reg <= select_ln30_1_reg_828_pp0_iter7_reg;
        select_ln30_1_reg_828_pp0_iter9_reg <= select_ln30_1_reg_828_pp0_iter8_reg;
        select_ln30_2_reg_833_pp0_iter10_reg[19 : 9] <= select_ln30_2_reg_833_pp0_iter9_reg[19 : 9];
        select_ln30_2_reg_833_pp0_iter11_reg[19 : 9] <= select_ln30_2_reg_833_pp0_iter10_reg[19 : 9];
        select_ln30_2_reg_833_pp0_iter12_reg[19 : 9] <= select_ln30_2_reg_833_pp0_iter11_reg[19 : 9];
        select_ln30_2_reg_833_pp0_iter13_reg[19 : 9] <= select_ln30_2_reg_833_pp0_iter12_reg[19 : 9];
        select_ln30_2_reg_833_pp0_iter3_reg[19 : 9] <= select_ln30_2_reg_833[19 : 9];
        select_ln30_2_reg_833_pp0_iter4_reg[19 : 9] <= select_ln30_2_reg_833_pp0_iter3_reg[19 : 9];
        select_ln30_2_reg_833_pp0_iter5_reg[19 : 9] <= select_ln30_2_reg_833_pp0_iter4_reg[19 : 9];
        select_ln30_2_reg_833_pp0_iter6_reg[19 : 9] <= select_ln30_2_reg_833_pp0_iter5_reg[19 : 9];
        select_ln30_2_reg_833_pp0_iter7_reg[19 : 9] <= select_ln30_2_reg_833_pp0_iter6_reg[19 : 9];
        select_ln30_2_reg_833_pp0_iter8_reg[19 : 9] <= select_ln30_2_reg_833_pp0_iter7_reg[19 : 9];
        select_ln30_2_reg_833_pp0_iter9_reg[19 : 9] <= select_ln30_2_reg_833_pp0_iter8_reg[19 : 9];
        select_ln30_reg_817_pp0_iter10_reg <= select_ln30_reg_817_pp0_iter9_reg;
        select_ln30_reg_817_pp0_iter11_reg <= select_ln30_reg_817_pp0_iter10_reg;
        select_ln30_reg_817_pp0_iter12_reg <= select_ln30_reg_817_pp0_iter11_reg;
        select_ln30_reg_817_pp0_iter13_reg <= select_ln30_reg_817_pp0_iter12_reg;
        select_ln30_reg_817_pp0_iter2_reg <= select_ln30_reg_817;
        select_ln30_reg_817_pp0_iter3_reg <= select_ln30_reg_817_pp0_iter2_reg;
        select_ln30_reg_817_pp0_iter4_reg <= select_ln30_reg_817_pp0_iter3_reg;
        select_ln30_reg_817_pp0_iter5_reg <= select_ln30_reg_817_pp0_iter4_reg;
        select_ln30_reg_817_pp0_iter6_reg <= select_ln30_reg_817_pp0_iter5_reg;
        select_ln30_reg_817_pp0_iter7_reg <= select_ln30_reg_817_pp0_iter6_reg;
        select_ln30_reg_817_pp0_iter8_reg <= select_ln30_reg_817_pp0_iter7_reg;
        select_ln30_reg_817_pp0_iter9_reg <= select_ln30_reg_817_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln30_reg_803_pp0_iter14_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dst_addr_1_reg_948 <= sext_ln33_fu_631_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln30_reg_803_pp0_iter15_reg == 1'd0))) begin
        dst_b_1_reg_959 <= {{mul_ln16_2_fu_672_p2[32:25]}};
        dst_r_1_reg_954 <= {{mul_ln14_2_fu_644_p2[32:25]}};
        tmp_1_reg_964 <= {{mul_ln15_2_fu_663_p2[32:25]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln30_reg_803_pp0_iter12_reg == 1'd0))) begin
        dst_b_reg_898 <= dst_b_fu_512_p1;
        dst_g_reg_908 <= {{m_axi_dst_RDATA[15:8]}};
        dst_r_reg_903 <= {{m_axi_dst_RDATA[23:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln30_reg_803 == 1'd0))) begin
        select_ln30_2_reg_833[19 : 9] <= select_ln30_2_fu_378_p3[19 : 9];
        sext_ln31_1_mid2_v_reg_843 <= {{add_ln30_1_fu_432_p2[63:2]}};
        sext_ln31_mid2_v_reg_838 <= {{add_ln30_fu_417_p2[63:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln30_reg_803_pp0_iter10_reg == 1'd0))) begin
        src_b_reg_868 <= src_b_fu_479_p1;
        src_g_reg_878 <= {{m_axi_src_RDATA[15:8]}};
        src_r_reg_873 <= {{m_axi_src_RDATA[23:16]}};
    end
end

always @ (*) begin
    if (((icmp_ln30_fu_275_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln30_reg_803 == 1'd1))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter21_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln30_reg_803 == 1'd0))) begin
        ap_phi_mux_first_iter_0_phi_fu_234_p4 = 1'd0;
    end else begin
        ap_phi_mux_first_iter_0_phi_fu_234_p4 = first_iter_0_reg_230;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (or_ln30_reg_813_pp0_iter2_reg == 1'd1))) begin
        dst_blk_n_AR = m_axi_dst_ARREADY;
    end else begin
        dst_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter16 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln30_reg_803_pp0_iter15_reg == 1'd0))) begin
        dst_blk_n_AW = m_axi_dst_AWREADY;
    end else begin
        dst_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter22 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln30_reg_803_pp0_iter21_reg == 1'd0))) begin
        dst_blk_n_B = m_axi_dst_BVALID;
    end else begin
        dst_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln30_reg_803_pp0_iter12_reg == 1'd0))) begin
        dst_blk_n_R = m_axi_dst_RVALID;
    end else begin
        dst_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter17 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln30_reg_803_pp0_iter16_reg == 1'd0))) begin
        dst_blk_n_W = m_axi_dst_WREADY;
    end else begin
        dst_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_710_ce = 1'b1;
    end else begin
        grp_fu_710_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_717_ce = 1'b1;
    end else begin
        grp_fu_717_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_724_ce = 1'b1;
    end else begin
        grp_fu_724_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (or_ln30_reg_813_pp0_iter2_reg == 1'd1))) begin
        m_axi_dst_ARVALID = 1'b1;
    end else begin
        m_axi_dst_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter16 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln30_reg_803_pp0_iter15_reg == 1'd0))) begin
        m_axi_dst_AWVALID = 1'b1;
    end else begin
        m_axi_dst_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter22 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln30_reg_803_pp0_iter21_reg == 1'd0))) begin
        m_axi_dst_BREADY = 1'b1;
    end else begin
        m_axi_dst_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln30_reg_803_pp0_iter12_reg == 1'd0))) begin
        m_axi_dst_RREADY = 1'b1;
    end else begin
        m_axi_dst_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter17 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln30_reg_803_pp0_iter16_reg == 1'd0))) begin
        m_axi_dst_WVALID = 1'b1;
    end else begin
        m_axi_dst_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (or_ln30_reg_813_pp0_iter2_reg == 1'd1))) begin
        m_axi_src_ARVALID = 1'b1;
    end else begin
        m_axi_src_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln30_reg_803_pp0_iter10_reg == 1'd0))) begin
        m_axi_src_RREADY = 1'b1;
    end else begin
        m_axi_src_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (or_ln30_reg_813_pp0_iter2_reg == 1'd1))) begin
        src_blk_n_AR = m_axi_src_ARREADY;
    end else begin
        src_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln30_reg_803_pp0_iter10_reg == 1'd0))) begin
        src_blk_n_R = m_axi_src_RVALID;
    end else begin
        src_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln30_1_fu_432_p2 = (zext_ln30_2_fu_413_p1 + dst_in);

assign add_ln30_2_fu_280_p2 = (indvar_flatten_fu_140 + 22'd1);

assign add_ln30_3_fu_308_p2 = (y_fu_136 + 11'd1);

assign add_ln30_fu_417_p2 = (zext_ln30_2_fu_413_p1 + src_in);

assign add_ln33_1_fu_599_p2 = (zext_ln33_2_fu_595_p1 + zext_ln30_1_fu_547_p1);

assign add_ln33_2_fu_589_p2 = (zext_ln30_fu_543_p1 + zext_ln33_fu_550_p1);

assign add_ln33_fu_616_p2 = (zext_ln33_3_fu_612_p1 + dst_out);

assign alpha_cast_cast_fu_250_p1 = alpha_cast;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter22 == 1'b1) & (icmp_ln30_reg_803_pp0_iter21_reg == 1'd0) & (m_axi_dst_BVALID == 1'b0)) | ((ap_enable_reg_pp0_iter13 == 1'b1) & (icmp_ln30_reg_803_pp0_iter12_reg == 1'd0) & (m_axi_dst_RVALID == 1'b0)) | ((ap_enable_reg_pp0_iter11 == 1'b1) & (icmp_ln30_reg_803_pp0_iter10_reg == 1'd0) & (m_axi_src_RVALID == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter22 == 1'b1) & (icmp_ln30_reg_803_pp0_iter21_reg == 1'd0) & (m_axi_dst_BVALID == 1'b0)) | ((ap_enable_reg_pp0_iter17 == 1'b1) & (1'b1 == ap_block_state18_io)) | ((ap_enable_reg_pp0_iter16 == 1'b1) & (1'b1 == ap_block_state17_io)) | ((ap_enable_reg_pp0_iter13 == 1'b1) & (icmp_ln30_reg_803_pp0_iter12_reg == 1'd0) & (m_axi_dst_RVALID == 1'b0)) | ((ap_enable_reg_pp0_iter11 == 1'b1) & (icmp_ln30_reg_803_pp0_iter10_reg == 1'd0) & (m_axi_src_RVALID == 1'b0)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter22 == 1'b1) & (icmp_ln30_reg_803_pp0_iter21_reg == 1'd0) & (m_axi_dst_BVALID == 1'b0)) | ((ap_enable_reg_pp0_iter17 == 1'b1) & (1'b1 == ap_block_state18_io)) | ((ap_enable_reg_pp0_iter16 == 1'b1) & (1'b1 == ap_block_state17_io)) | ((ap_enable_reg_pp0_iter13 == 1'b1) & (icmp_ln30_reg_803_pp0_iter12_reg == 1'd0) & (m_axi_dst_RVALID == 1'b0)) | ((ap_enable_reg_pp0_iter11 == 1'b1) & (icmp_ln30_reg_803_pp0_iter10_reg == 1'd0) & (m_axi_src_RVALID == 1'b0)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_io)));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12_pp0_stage0_iter11 = ((icmp_ln30_reg_803_pp0_iter10_reg == 1'd0) & (m_axi_src_RVALID == 1'b0));
end

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state14_pp0_stage0_iter13 = ((icmp_ln30_reg_803_pp0_iter12_reg == 1'd0) & (m_axi_dst_RVALID == 1'b0));
end

assign ap_block_state15_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state17_io = ((icmp_ln30_reg_803_pp0_iter15_reg == 1'd0) & (m_axi_dst_AWREADY == 1'b0));
end

assign ap_block_state17_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state18_io = ((icmp_ln30_reg_803_pp0_iter16_reg == 1'd0) & (m_axi_dst_WREADY == 1'b0));
end

assign ap_block_state18_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state23_pp0_stage0_iter22 = ((icmp_ln30_reg_803_pp0_iter21_reg == 1'd0) & (m_axi_dst_BVALID == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = (((or_ln30_reg_813_pp0_iter2_reg == 1'd1) & (m_axi_dst_ARREADY == 1'b0)) | ((or_ln30_reg_813_pp0_iter2_reg == 1'd1) & (m_axi_src_ARREADY == 1'b0)));
end

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign dst_b_fu_512_p1 = m_axi_dst_RDATA[7:0];

assign empty_fu_365_p2 = (p_shl_cast_fu_357_p1 + p_shl1_cast_fu_361_p1);

assign grp_fu_710_p0 = grp_fu_710_p00;

assign grp_fu_710_p00 = src_r_reg_873;

assign grp_fu_710_p1 = alpha_cast_cast_reg_790;

assign grp_fu_710_p2 = grp_fu_710_p20;

assign grp_fu_710_p20 = mul_ln14_1_fu_556_p2;

assign grp_fu_717_p0 = grp_fu_717_p00;

assign grp_fu_717_p00 = src_g_reg_878;

assign grp_fu_717_p1 = alpha_cast_cast_reg_790;

assign grp_fu_717_p2 = grp_fu_717_p20;

assign grp_fu_717_p20 = mul_ln15_1_fu_568_p2;

assign grp_fu_724_p0 = grp_fu_724_p00;

assign grp_fu_724_p00 = src_b_reg_868;

assign grp_fu_724_p1 = alpha_cast_cast_reg_790;

assign grp_fu_724_p2 = grp_fu_724_p20;

assign grp_fu_724_p20 = mul_ln16_1_fu_580_p2;

assign icmp_ln30_fu_275_p2 = ((indvar_flatten_fu_140 == mul_ln22) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_289_p2 = ((x_fu_132 == width) ? 1'b1 : 1'b0);

assign m_axi_dst_ARADDR = sext_ln30_1_fu_450_p1;

assign m_axi_dst_ARBURST = 2'd0;

assign m_axi_dst_ARCACHE = 4'd0;

assign m_axi_dst_ARID = 1'd0;

assign m_axi_dst_ARLEN = zext_ln31_cast_reg_777;

assign m_axi_dst_ARLOCK = 2'd0;

assign m_axi_dst_ARPROT = 3'd0;

assign m_axi_dst_ARQOS = 4'd0;

assign m_axi_dst_ARREGION = 4'd0;

assign m_axi_dst_ARSIZE = 3'd0;

assign m_axi_dst_ARUSER = 1'd0;

assign m_axi_dst_AWADDR = dst_addr_1_reg_948;

assign m_axi_dst_AWBURST = 2'd0;

assign m_axi_dst_AWCACHE = 4'd0;

assign m_axi_dst_AWID = 1'd0;

assign m_axi_dst_AWLEN = 32'd1;

assign m_axi_dst_AWLOCK = 2'd0;

assign m_axi_dst_AWPROT = 3'd0;

assign m_axi_dst_AWQOS = 4'd0;

assign m_axi_dst_AWREGION = 4'd0;

assign m_axi_dst_AWSIZE = 3'd0;

assign m_axi_dst_AWUSER = 1'd0;

assign m_axi_dst_WDATA = or_ln18_1_fu_698_p4;

assign m_axi_dst_WID = 1'd0;

assign m_axi_dst_WLAST = 1'b0;

assign m_axi_dst_WSTRB = 4'd15;

assign m_axi_dst_WUSER = 1'd0;

assign m_axi_src_ARADDR = sext_ln30_fu_447_p1;

assign m_axi_src_ARBURST = 2'd0;

assign m_axi_src_ARCACHE = 4'd0;

assign m_axi_src_ARID = 1'd0;

assign m_axi_src_ARLEN = zext_ln31_cast_reg_777;

assign m_axi_src_ARLOCK = 2'd0;

assign m_axi_src_ARPROT = 3'd0;

assign m_axi_src_ARQOS = 4'd0;

assign m_axi_src_ARREGION = 4'd0;

assign m_axi_src_ARSIZE = 3'd0;

assign m_axi_src_ARUSER = 1'd0;

assign m_axi_src_AWADDR = 64'd0;

assign m_axi_src_AWBURST = 2'd0;

assign m_axi_src_AWCACHE = 4'd0;

assign m_axi_src_AWID = 1'd0;

assign m_axi_src_AWLEN = 32'd0;

assign m_axi_src_AWLOCK = 2'd0;

assign m_axi_src_AWPROT = 3'd0;

assign m_axi_src_AWQOS = 4'd0;

assign m_axi_src_AWREGION = 4'd0;

assign m_axi_src_AWSIZE = 3'd0;

assign m_axi_src_AWUSER = 1'd0;

assign m_axi_src_AWVALID = 1'b0;

assign m_axi_src_BREADY = 1'b0;

assign m_axi_src_WDATA = 32'd0;

assign m_axi_src_WID = 1'd0;

assign m_axi_src_WLAST = 1'b0;

assign m_axi_src_WSTRB = 4'd0;

assign m_axi_src_WUSER = 1'd0;

assign m_axi_src_WVALID = 1'b0;

assign mul_ln14_1_fu_556_p0 = mul_ln14_1_fu_556_p00;

assign mul_ln14_1_fu_556_p00 = dst_r_reg_903;

assign mul_ln14_1_fu_556_p1 = zext_ln31_1_cast_reg_783;

assign mul_ln14_2_fu_644_p0 = mul_ln14_2_fu_644_p00;

assign mul_ln14_2_fu_644_p00 = add_ln14_reg_933;

assign mul_ln14_2_fu_644_p1 = 35'd131587;

assign mul_ln15_1_fu_568_p0 = mul_ln15_1_fu_568_p00;

assign mul_ln15_1_fu_568_p00 = dst_g_reg_908;

assign mul_ln15_1_fu_568_p1 = zext_ln31_1_cast_reg_783;

assign mul_ln15_2_fu_663_p0 = mul_ln15_2_fu_663_p00;

assign mul_ln15_2_fu_663_p00 = add_ln15_reg_938;

assign mul_ln15_2_fu_663_p1 = 35'd131587;

assign mul_ln16_1_fu_580_p0 = mul_ln16_1_fu_580_p00;

assign mul_ln16_1_fu_580_p00 = dst_b_reg_898;

assign mul_ln16_1_fu_580_p1 = zext_ln31_1_cast_reg_783;

assign mul_ln16_2_fu_672_p0 = mul_ln16_2_fu_672_p00;

assign mul_ln16_2_fu_672_p00 = add_ln16_reg_943;

assign mul_ln16_2_fu_672_p1 = 35'd131587;

assign or_ln18_1_fu_698_p4 = {{{dst_r_1_reg_954}, {tmp_1_reg_964}}, {dst_b_1_reg_959}};

assign or_ln30_fu_294_p2 = (icmp_ln31_fu_289_p2 | ap_phi_mux_first_iter_0_phi_fu_234_p4);

assign p_cast_mid2_v_fu_536_p3 = {{select_ln30_1_reg_828_pp0_iter13_reg}, {7'd0}};

assign p_mid112_fu_400_p2 = (p_shl_cast_mid1_fu_392_p1 + p_shl1_cast_mid1_fu_396_p1);

assign p_mid_fu_371_p3 = {{add_ln30_3_reg_822}, {9'd0}};

assign p_shl1_cast_fu_361_p1 = tmp_fu_343_p3;

assign p_shl1_cast_mid1_fu_396_p1 = p_mid_fu_371_p3;

assign p_shl_cast_fu_357_p1 = p_shl_fu_350_p3;

assign p_shl_cast_mid1_fu_392_p1 = p_shl_mid1_fu_385_p3;

assign p_shl_fu_350_p3 = {{y_1_reg_797}, {11'd0}};

assign p_shl_mid1_fu_385_p3 = {{add_ln30_3_reg_822}, {11'd0}};

assign select_ln30_1_fu_314_p3 = ((icmp_ln31_fu_289_p2[0:0] == 1'b1) ? add_ln30_3_fu_308_p2 : y_fu_136);

assign select_ln30_2_fu_378_p3 = ((icmp_ln31_reg_807[0:0] == 1'b1) ? p_mid_fu_371_p3 : tmp_fu_343_p3);

assign select_ln30_3_fu_406_p3 = ((icmp_ln31_reg_807[0:0] == 1'b1) ? p_mid112_fu_400_p2 : empty_fu_365_p2);

assign select_ln30_fu_300_p3 = ((icmp_ln31_fu_289_p2[0:0] == 1'b1) ? 11'd0 : x_fu_132);

assign sext_ln30_1_fu_450_p1 = $signed(sext_ln31_1_mid2_v_reg_843);

assign sext_ln30_fu_447_p1 = $signed(sext_ln31_mid2_v_reg_838);

assign sext_ln33_fu_631_p1 = $signed(trunc_ln_fu_621_p4);

assign shl_ln_fu_605_p3 = {{add_ln33_1_reg_928}, {2'd0}};

assign src_b_fu_479_p1 = m_axi_src_RDATA[7:0];

assign tmp_fu_343_p3 = {{y_1_reg_797}, {9'd0}};

assign trunc_ln_fu_621_p4 = {{add_ln33_fu_616_p2[63:2]}};

assign x_1_fu_322_p2 = (select_ln30_fu_300_p3 + 11'd1);

assign zext_ln30_1_fu_547_p1 = select_ln30_2_reg_833_pp0_iter13_reg;

assign zext_ln30_2_fu_413_p1 = select_ln30_3_fu_406_p3;

assign zext_ln30_fu_543_p1 = p_cast_mid2_v_fu_536_p3;

assign zext_ln31_1_cast_fu_246_p1 = zext_ln31_1;

assign zext_ln31_cast_fu_242_p1 = zext_ln31;

assign zext_ln33_2_fu_595_p1 = add_ln33_2_fu_589_p2;

assign zext_ln33_3_fu_612_p1 = shl_ln_fu_605_p3;

assign zext_ln33_fu_550_p1 = select_ln30_reg_817_pp0_iter13_reg;

always @ (posedge ap_clk) begin
    zext_ln31_cast_reg_777[31:11] <= 21'b000000000000000000000;
    zext_ln31_1_cast_reg_783[15:8] <= 8'b00000000;
    alpha_cast_cast_reg_790[15:8] <= 8'b00000000;
    select_ln30_2_reg_833[8:0] <= 9'b000000000;
    select_ln30_2_reg_833_pp0_iter3_reg[8:0] <= 9'b000000000;
    select_ln30_2_reg_833_pp0_iter4_reg[8:0] <= 9'b000000000;
    select_ln30_2_reg_833_pp0_iter5_reg[8:0] <= 9'b000000000;
    select_ln30_2_reg_833_pp0_iter6_reg[8:0] <= 9'b000000000;
    select_ln30_2_reg_833_pp0_iter7_reg[8:0] <= 9'b000000000;
    select_ln30_2_reg_833_pp0_iter8_reg[8:0] <= 9'b000000000;
    select_ln30_2_reg_833_pp0_iter9_reg[8:0] <= 9'b000000000;
    select_ln30_2_reg_833_pp0_iter10_reg[8:0] <= 9'b000000000;
    select_ln30_2_reg_833_pp0_iter11_reg[8:0] <= 9'b000000000;
    select_ln30_2_reg_833_pp0_iter12_reg[8:0] <= 9'b000000000;
    select_ln30_2_reg_833_pp0_iter13_reg[8:0] <= 9'b000000000;
end

endmodule //bitblt_bitblt_Pipeline_horiz_loop
