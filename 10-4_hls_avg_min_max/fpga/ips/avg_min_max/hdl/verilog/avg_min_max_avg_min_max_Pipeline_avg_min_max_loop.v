// ==============================================================
// Generated by Vitis HLS v2023.1.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module avg_min_max_avg_min_max_Pipeline_avg_min_max_loop (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sum_3,
        a_address0,
        a_ce0,
        a_q0,
        max_temp_out,
        max_temp_out_ap_vld,
        min_temp_out,
        min_temp_out_ap_vld,
        sum_out,
        sum_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] sum_3;
output  [3:0] a_address0;
output   a_ce0;
input  [15:0] a_q0;
output  [15:0] max_temp_out;
output   max_temp_out_ap_vld;
output  [15:0] min_temp_out;
output   min_temp_out_ap_vld;
output  [15:0] sum_out;
output   sum_out_ap_vld;

reg ap_idle;
reg a_ce0;
reg max_temp_out_ap_vld;
reg min_temp_out_ap_vld;
reg sum_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln6_fu_131_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] i_cast_fu_137_p1;
wire    ap_block_pp0_stage0;
reg   [15:0] sum_fu_52;
wire   [15:0] sum_1_fu_162_p2;
wire    ap_loop_init;
reg   [15:0] min_temp_fu_56;
wire   [15:0] min_temp_1_fu_188_p3;
reg   [15:0] max_temp_fu_60;
wire   [15:0] max_temp_2_fu_196_p3;
reg   [4:0] i_fu_64;
wire   [4:0] i_3_fu_142_p2;
reg   [4:0] ap_sig_allocacmp_i_2;
wire    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln11_fu_174_p2;
wire   [0:0] icmp_ln9_fu_168_p2;
wire   [15:0] max_temp_1_fu_180_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

avg_min_max_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln6_fu_131_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_64 <= i_3_fu_142_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_64 <= 5'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            max_temp_fu_60 <= sum_3;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            max_temp_fu_60 <= max_temp_2_fu_196_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            min_temp_fu_56 <= sum_3;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            min_temp_fu_56 <= min_temp_1_fu_188_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            sum_fu_52 <= sum_3;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            sum_fu_52 <= sum_1_fu_162_p2;
        end
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln6_fu_131_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_2 = 5'd1;
    end else begin
        ap_sig_allocacmp_i_2 = i_fu_64;
    end
end

always @ (*) begin
    if (((icmp_ln6_fu_131_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        max_temp_out_ap_vld = 1'b1;
    end else begin
        max_temp_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln6_fu_131_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        min_temp_out_ap_vld = 1'b1;
    end else begin
        min_temp_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln6_fu_131_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sum_out_ap_vld = 1'b1;
    end else begin
        sum_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_address0 = i_cast_fu_137_p1;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_3_fu_142_p2 = (ap_sig_allocacmp_i_2 + 5'd1);

assign i_cast_fu_137_p1 = ap_sig_allocacmp_i_2;

assign icmp_ln11_fu_174_p2 = (($signed(a_q0) > $signed(max_temp_fu_60)) ? 1'b1 : 1'b0);

assign icmp_ln6_fu_131_p2 = ((ap_sig_allocacmp_i_2 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_168_p2 = (($signed(a_q0) < $signed(min_temp_fu_56)) ? 1'b1 : 1'b0);

assign max_temp_1_fu_180_p3 = ((icmp_ln11_fu_174_p2[0:0] == 1'b1) ? a_q0 : max_temp_fu_60);

assign max_temp_2_fu_196_p3 = ((icmp_ln9_fu_168_p2[0:0] == 1'b1) ? max_temp_fu_60 : max_temp_1_fu_180_p3);

assign max_temp_out = max_temp_fu_60;

assign min_temp_1_fu_188_p3 = ((icmp_ln9_fu_168_p2[0:0] == 1'b1) ? a_q0 : min_temp_fu_56);

assign min_temp_out = min_temp_fu_56;

assign sum_1_fu_162_p2 = (a_q0 + sum_fu_52);

assign sum_out = sum_fu_52;

endmodule //avg_min_max_avg_min_max_Pipeline_avg_min_max_loop
