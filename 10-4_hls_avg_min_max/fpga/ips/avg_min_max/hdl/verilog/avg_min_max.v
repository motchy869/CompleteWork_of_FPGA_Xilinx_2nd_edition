// ==============================================================
// Generated by Vitis HLS v2023.1.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="avg_min_max_avg_min_max,hls_ip_2023_1_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010i-clg225-1L,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.792000,HLS_SYN_LAT=21,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=260,HLS_SYN_LUT=478,HLS_VERSION=2023_1_1}" *)

module avg_min_max (
        ap_clk,
        ap_rst_n,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [3:0] a_address0;
reg    a_ce0;
wire   [15:0] a_q0;
wire   [15:0] avg;
reg    avg_ap_vld;
reg    min_ap_vld;
reg    max_ap_vld;
reg   [15:0] sum_reg_166;
wire    ap_CS_fsm_state2;
wire    grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_ap_start;
wire    grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_ap_done;
wire    grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_ap_idle;
wire    grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_ap_ready;
wire   [3:0] grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_a_address0;
wire    grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_a_ce0;
wire   [15:0] grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_max_temp_out;
wire    grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_max_temp_out_ap_vld;
wire   [15:0] grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_min_temp_out;
wire    grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_min_temp_out_ap_vld;
wire   [15:0] grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_sum_out;
wire    grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_sum_out_ap_vld;
reg    grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_ap_start_reg;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire   [11:0] trunc_ln_fu_128_p4;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_ap_start_reg = 1'b0;
end

avg_min_max_avg_min_max_Pipeline_avg_min_max_loop grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_ap_start),
    .ap_done(grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_ap_done),
    .ap_idle(grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_ap_idle),
    .ap_ready(grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_ap_ready),
    .sum_3(sum_reg_166),
    .a_address0(grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_a_address0),
    .a_ce0(grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_a_ce0),
    .a_q0(a_q0),
    .max_temp_out(grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_max_temp_out),
    .max_temp_out_ap_vld(grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_max_temp_out_ap_vld),
    .min_temp_out(grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_min_temp_out),
    .min_temp_out_ap_vld(grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_min_temp_out_ap_vld),
    .sum_out(grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_sum_out),
    .sum_out_ap_vld(grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_sum_out_ap_vld)
);

avg_min_max_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .avg(avg),
    .avg_ap_vld(avg_ap_vld),
    .a_address0(a_address0),
    .a_ce0(a_ce0),
    .a_q0(a_q0),
    .min(grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_min_temp_out),
    .min_ap_vld(min_ap_vld),
    .max(grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_max_temp_out),
    .max_ap_vld(max_ap_vld),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_ap_start_reg <= 1'b1;
        end else if ((grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_ap_ready == 1'b1)) begin
            grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sum_reg_166 <= a_q0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        a_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        a_address0 = grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_a_address0;
    end else begin
        a_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        a_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        a_ce0 = grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_a_ce0;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        avg_ap_vld = 1'b1;
    end else begin
        avg_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        max_ap_vld = 1'b1;
    end else begin
        max_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        min_ap_vld = 1'b1;
    end else begin
        min_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign avg = $signed(trunc_ln_fu_128_p4);

assign grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_ap_start = grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_ap_start_reg;

assign trunc_ln_fu_128_p4 = {{grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_sum_out[15:4]}};

endmodule //avg_min_max
