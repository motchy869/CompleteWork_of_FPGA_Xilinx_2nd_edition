-- ==============================================================
-- Generated by Vitis HLS v2023.1.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity avg_min_max is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of avg_min_max is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "avg_min_max_avg_min_max,hls_ip_2023_1_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010i-clg225-1L,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.792000,HLS_SYN_LAT=21,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=260,HLS_SYN_LUT=478,HLS_VERSION=2023_1_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal a_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal a_ce0 : STD_LOGIC;
    signal a_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal avg : STD_LOGIC_VECTOR (15 downto 0);
    signal avg_ap_vld : STD_LOGIC;
    signal min_ap_vld : STD_LOGIC;
    signal max_ap_vld : STD_LOGIC;
    signal sum_reg_166 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_ap_start : STD_LOGIC;
    signal grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_ap_done : STD_LOGIC;
    signal grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_ap_idle : STD_LOGIC;
    signal grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_ap_ready : STD_LOGIC;
    signal grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_a_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_a_ce0 : STD_LOGIC;
    signal grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_max_temp_out : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_max_temp_out_ap_vld : STD_LOGIC;
    signal grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_min_temp_out : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_min_temp_out_ap_vld : STD_LOGIC;
    signal grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_sum_out : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_sum_out_ap_vld : STD_LOGIC;
    signal grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal trunc_ln_fu_128_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component avg_min_max_avg_min_max_Pipeline_avg_min_max_loop IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sum_3 : IN STD_LOGIC_VECTOR (15 downto 0);
        a_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        a_ce0 : OUT STD_LOGIC;
        a_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        max_temp_out : OUT STD_LOGIC_VECTOR (15 downto 0);
        max_temp_out_ap_vld : OUT STD_LOGIC;
        min_temp_out : OUT STD_LOGIC_VECTOR (15 downto 0);
        min_temp_out_ap_vld : OUT STD_LOGIC;
        sum_out : OUT STD_LOGIC_VECTOR (15 downto 0);
        sum_out_ap_vld : OUT STD_LOGIC );
    end component;


    component avg_min_max_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        avg : IN STD_LOGIC_VECTOR (15 downto 0);
        avg_ap_vld : IN STD_LOGIC;
        a_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        a_ce0 : IN STD_LOGIC;
        a_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        min : IN STD_LOGIC_VECTOR (15 downto 0);
        min_ap_vld : IN STD_LOGIC;
        max : IN STD_LOGIC_VECTOR (15 downto 0);
        max_ap_vld : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107 : component avg_min_max_avg_min_max_Pipeline_avg_min_max_loop
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_ap_start,
        ap_done => grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_ap_done,
        ap_idle => grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_ap_idle,
        ap_ready => grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_ap_ready,
        sum_3 => sum_reg_166,
        a_address0 => grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_a_address0,
        a_ce0 => grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_a_ce0,
        a_q0 => a_q0,
        max_temp_out => grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_max_temp_out,
        max_temp_out_ap_vld => grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_max_temp_out_ap_vld,
        min_temp_out => grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_min_temp_out,
        min_temp_out_ap_vld => grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_min_temp_out_ap_vld,
        sum_out => grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_sum_out,
        sum_out_ap_vld => grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_sum_out_ap_vld);

    control_s_axi_U : component avg_min_max_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        avg => avg,
        avg_ap_vld => avg_ap_vld,
        a_address0 => a_address0,
        a_ce0 => a_ce0,
        a_q0 => a_q0,
        min => grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_min_temp_out,
        min_ap_vld => min_ap_vld,
        max => grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_max_temp_out,
        max_ap_vld => max_ap_vld,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_ap_ready = ap_const_logic_1)) then 
                    grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                sum_reg_166 <= a_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_ap_done, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    a_address0_assign_proc : process(ap_CS_fsm_state1, grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_a_address0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            a_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            a_address0 <= grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_a_address0;
        else 
            a_address0 <= "XXXX";
        end if; 
    end process;


    a_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_a_ce0, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            a_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            a_ce0 <= grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_a_ce0;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_ap_done)
    begin
        if ((grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

        avg <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_128_p4),16));


    avg_ap_vld_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            avg_ap_vld <= ap_const_logic_1;
        else 
            avg_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_ap_start <= grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_ap_start_reg;

    max_ap_vld_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            max_ap_vld <= ap_const_logic_1;
        else 
            max_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    min_ap_vld_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            min_ap_vld <= ap_const_logic_1;
        else 
            min_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln_fu_128_p4 <= grp_avg_min_max_Pipeline_avg_min_max_loop_fu_107_sum_out(15 downto 4);
end behav;
